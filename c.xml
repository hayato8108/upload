<?xml version="1.0" encoding="UTF-8"?>
<ROOT>
<FORMROOT clid="Client" Name="Client" Stretch="STRETCH_FULL" StartupSize="DEFAULTFORM" ShowStatusBar="F" PSLoginStartup="AUTO" PSFilePath="cSvr.txt" Product="PA-Panel" Ver="6.0" Rev="12.1" FileRev="3" FileSaveWithoutDefault="T">
<OBJ clid="Folder" Name="Folder01">
<OBJ clid="Form" Name="Form01" Height="500" Width="480" VisualTheme="DEFAULT" LocaleLanguage="DEFAULT">
<OBJ clid="EditBox" Name="ebxDev" Text="M0-M10" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" TextAlignX="LEFT" Top="20" Left="120" Height="40" Width="270">
</OBJ>
<OBJ clid="EditBox" Name="ebxFile" Text="test1.csv,test2.csv" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" TextAlignX="LEFT" Top="140" Left="10" Height="40" Width="460">
</OBJ>
<OBJ clid="Button" Name="btnAdd" Text="ADD" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" Top="20" Left="400" Height="40" Width="70" Event="
event OnMouseUp(button)
{
	parent.clsDevice.SetTag();
}
">
</OBJ>
<OBJ clid="Button" Name="btnSet" Text="SET" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" Top="80" Left="330" Height="40" Width="70" Event="
event OnMouseUp(button)
{
	parent.clsCsv.SetCsvCheck();
}">
</OBJ>
<OBJ clid="EditBox" Name="ebxUnit" Text="U01" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" TextAlignX="LEFT" Top="20" Left="10" Height="40" Width="50">
</OBJ>
<OBJ clid="EditBox" Name="ebxFol" Text="F01" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" TextAlignX="LEFT" Top="20" Left="60" Height="40" Width="60">
</OBJ>
<OBJ clid="Label" Text="CsvFolderPath" TextAlignX="LEFT" Top="60" Left="10" Height="20" Width="50">
</OBJ>
<OBJ clid="Label" Text="Folder" TextAlignX="LEFT" Top="0" Left="60" Height="20" Width="50">
</OBJ>
<OBJ clid="ListBox" Name="lbxOut" TextList="" Top="180" Left="10" Height="260" Width="460">
</OBJ>
<OBJ clid="Label" Text="Unit" TextAlignX="LEFT" Top="0" Left="10" Height="20" Width="50">
</OBJ>
<OBJ clid="Rectangle" Name="clsDevice" Text="Device" Border="F" FillColor="#93CDDD" RotateX="40" RotateY="-30" Top="-60" Left="0" Height="50" Width="92" Event="var mvIgnore;
var mvCrrTagCnt;
var mvCsvCmnt;
	
function SetTag()
{
	this.mvIgnore = 0;
	this.mvCrrTagCnt = 0;
	this.ClearAllTag();

	var vTags = parent.ebxDev.Text;
	
	var vRanges = ::CStrToArray(vTags, &quot;,&quot;, T, T);	
	var vCnt  = ::GetValueElement(vRanges, 0);
	
	for ( var i = 0; i &lt; vCnt; i = i + 1 )
	{	
		var vRange;
		if (IsValidRange(vRanges[i], vRange) == F) continue;
		 
		var vDevice = ::MidStr(vRange[0], 0, 1);

		var vHead = ::MidStr(vRange[0], 1);
		var vEnd =  ::MidStr(vRange[1], 1);
		
//		var vAdrs = this.GetConsecutive(vHead, vEnd);
		var vAdrs = ::IntStrs(vHead, vEnd, 4, vDevice);
		
		var vDevHead = ::CStr(parent.ebxUnit.Text + &quot;.&quot; + parent.ebxFol.Text + &quot;.#&quot;);
		
		vAdrs = ::CombineStr(vAdrs, vDevHead, &quot;&quot;);
		this.AddTag(vAdrs);
		this.mvCrrTagCnt = this.mvCrrTagCnt + ::GetValueElement(vAdrs, 0);		
		
	}
}

function IsValidRange(str, &amp;val)
{
	var vRet = T;
	
	
/*
condition here
	var vRange = ::CStrToArray( str, &quot;-&quot;, T, T);
	var vDevice = ::MidStr(vRange[0], 0, 1);
	var vHead = ::MidStr(vRange[0], 1);
	var vEnd =  ::MidStr(vRange[1], 1);
	
	if (::CNum(vEnd) &lt; ::CNum(vHead))
	{
		vRet = F;
	}
	
UpperStr
IsFullWidthChar
*/	
	if (vRet==T) {
		val  = ::CStrToArray( str, &quot;-&quot;, T, T);
		return T;
	} else {
		val = &quot;&quot;;
		parent.lbxOut.AddText(&quot;Invalid Assign&quot;);
		return F;
	}		
}

function GetConsecutive(st, end) //=&gt;Array
{
	var vCnt = end - st + 1;
	var vArr[vCnt];
	for ( var i =  0; i &lt; vCnt ; i = i + 1 )
	{
		vArr[i] = st + i;
	}
	return vArr;
}

event OnTagValueChanged(tagname,value)
{
	while (this.mvIgnore &lt; this.mvCrrTagCnt)
	{
		this.mvIgnore = this.mvIgnore + 1;
		return;
	}
	
	var vCmnt = this.GetDeviceComment();	 
	var vMsg = ::CTimeStr(#NOW#, &quot;%M:%S&quot;) + &quot;   &quot; + ::CStr(tagname) + &quot;      &quot; + ::CStr(value) + vCmnt;
	parent.lbxOut.AddText(vMsg);
}

event OnTerminate()
{
	this.ClearAllTag();
}
">
</OBJ>
<OBJ clid="Rectangle" Name="clsCsv" Text="Csv" Border="F" FillColor="#93CDDD" RotateX="146" RotateY="-35" Top="-60" Left="100" Height="50" Width="92" Event="var mvCnt;
var mvTimeData;

function SetCsvCheck()
{
	if(this.CreateTempFile() == F) return;
 	this.SetTimer(1,100);
 	parent.ebxPath.Enabled = F;
 	parent.ebxFile.Enabled = F;
 	
}

function KillCsvCheck()
{
 	this.KillTimer(1);
 	parent.ebxPath.Enabled = T;
 	parent.ebxFile.Enabled = T;
}

function CreateTempFile()
{
	var vPath;
	var vTmpPath;
	var vFile;
	if (this.GetCsvFol(vFile) == F || this.GetCsvPath(vPath, vTmpPath) == F) 
	{
		parent.lbxOut.AddText(&quot;error : CreateTempFile&quot;);
		return F;
	}
	
	mvCnt = ::GetValueElement(vFile, 0);
	mvTimeData = ::Revar(mvTimeData, mvCnt, 1);	
	for (var i = 0 ; i &lt;mvCnt ; i++ ) {
		var vD;
		::GetFileLastWriteTime(vPath + vFile[i] , vD);
		mvTimeData[ i, 0] = vD; 
		var vLoadData;
		::LoadCsvFile(vPath + vFile[i], vLoadData);
		::SaveCsvFile(vTmpPath + vFile[i], vLoadData);
	}
	return T;
}

function CheckTimeStamp()
{
	var vPath;
	var vTmpPath;
	var vFile;
	if (this.GetCsvFol(vFile) == F || this.GetCsvPath(vPath, vTmpPath) == F) 
	{
		parent.lbxOut.AddText(&quot;error : CheckTimeStamp&quot;);
		return;
	}
	
	for (var i = 0 ; i &lt;mvCnt ; i++ ) {
		var vD;
		::GetFileLastWriteTime(vPath + vFile[i] , vD);
		if (mvTimeData[ i, 0] != vD)
		{
			this.CompareCsvFile(vTmpPath + vFile[i], vPath + vFile[i]);				
			parent.lbxOut.AddText(::CTimeStr(#NOW#, &quot;%M:%S&quot;) + &quot;   &quot; + &quot;file was modified: &quot; + vFile[i]);
			mvTimeData[ i, 0] = vD; 
			var vLoadData;
			::LoadCsvFile(vPath + vFile[i], vLoadData);
			::SaveCsvFile(vTmpPath + vFile[i], vLoadData);
		} 
	}

}


function CompareCsvFile(oldpath, newpath)
{
	var vOld;
	var vNew;
	var vMsg;

	::LoadCsvFile(oldpath, vOld);
	::LoadCsvFile(newpath, vNew);

//TESTER
//	vOld = c(c(&quot;TIMESTAMP&quot;,&quot;1&quot;,&quot;2&quot;), c(&quot;HEADA&quot;,&quot;c&quot;,&quot;c&quot;), c(&quot;HEADB&quot;,&quot;b&quot;,&quot;c&quot;), c(&quot;HEADC&quot;,&quot;b&quot;,&quot;c&quot;), c(&quot;HEADD&quot;,&quot;b&quot;,&quot;c&quot;));
//	vNew = c(c(&quot;TIMESTAMP&quot;,&quot;1&quot;,&quot;2&quot;), c(&quot;HEADA&quot;,&quot;b&quot;,&quot;c&quot;), c(&quot;HEADB&quot;,&quot;b&quot;,&quot;c&quot;), c(&quot;HEADC&quot;,&quot;b&quot;,&quot;c&quot;), c(&quot;HEADD&quot;,&quot;b&quot;,&quot;c&quot;));	
//
	var vCnt = ::GetValueElement(vOld, 0);
	
	var vDataStart = 1; 
	for (var i = vDataStart; i &lt; vCnt ; i++)
	{	
		//All to DiffArray
		var vDiff = vOld[i, ] != vNew[i, ];
		var vS = vOld[0, vDiff];
		var vO = vOld[i, vDiff];
		var vN = vNew[i, vDiff];
		
		//DiffArray to MsgFormat
		var vCntD = ::GetValueElement(vO, 0);
		
		for (var ii = 0; ii &lt; vCntD ; ii++)
		{
			var vOldVal = ::SV(::CStr(vO[ii]) != &quot;&quot; , ::CStr(vO[ii]), &quot;_&quot;);
			var vNewVal = ::SV(::CStr(vN[ii]) != &quot;&quot; , ::CStr(vN[ii]), &quot;_&quot;);

			vMsg = ::CStr(vS[ii]) + &quot;   &quot; + ::CStr(vOld[i, 0]) + &quot;   &quot; + vOldVal +  &quot;   ---&gt;   &quot; +  vNewVal;
			parent.lbxOut.AddText(vMsg);
		}	
	}	
}


event OnTimer(timerid,counter)
{
	if (timerid == 1) this.CheckTimeStamp();
}


function GetCsvFol(&amp;val)
{
	var vRet = T;
/*
condition Here
comma
*/
	if (vRet == T) {
		val = ::CStrToArray(parent.ebxFile.Text , &quot;,&quot;, T, T);
		return T;
	} else {
		val = &quot;&quot;;
		return F;
	}
}


function GetCsvPath(&amp;path, &amp;tmp)
{
	var vRet = T;
/*
condition Here
*/
	if (vRet == T) {
		path = parent.ebxPath.Text &amp; &quot;\&quot;;
		tmp = ::GetTempFolder() + &quot;\&quot;;
		return T;
	} else {
		path = &quot;&quot;;
		tmp = &quot;&quot;;
		return F;
	}
}

">
</OBJ>
<OBJ clid="EditBox" Name="ebxPath" Text="C:\Users\Owner\Documents\workspace\c\testCSV" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" TextAlignX="LEFT" Top="80" Left="10" Height="40" Width="310">
</OBJ>
<OBJ clid="Label" Text="CsvFolderPath" TextAlignX="LEFT" Top="120" Left="10" Height="20" Width="50">
</OBJ>
<OBJ clid="Button" Name="btnKill" Text="CLOSE" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" Top="80" Left="400" Height="40" Width="70" Event="
event OnMouseUp(button)
{
	parent.clsCsv.KillCsvCheck();
}">
</OBJ>
<OBJ clid="Button" Name="btnCls" Text="CLS" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" Top="450" Left="400" Height="40" Width="70" Event="
event OnMouseUp(button)
{
	parent.lbxOut.Clear();
}

">
</OBJ>
</OBJ>
<OBJ clid="Form" Name="Md" Height="600" Width="800" VisualTheme="DEFAULT" LocaleLanguage="DEFAULT" Event="
">
<OBJ clid="Rectangle" Text="MEMO" Border="F" FillColor="#93CDDD" RotateX="95" RotateY="335" Top="300" Left="30" Height="70" Width="130" Event="
/*	MEMO


ClearAllTag()


LoadCsvFile
var a;
::LoadCsvFile(&quot;c:\abc.csv&quot;, a);
xxx.Text = a[0, 0];       // 0列目0行目のデータ
xxx.Text = a[0, 1];       // 0列目1行目のデータ
xxx.Text = a[0, ];         // 0列目すべてのデータ
xxx.Text = a[0, 10:20];   // 0列目10行～20行目の11個のデータ
xxx.Text = a[, 0];        // 0行目のすべてのデータ

 
 1次元、1次元目の要素数1
a = 1;  eq  a = c(1);

1次元、1次元目の要素数3
a = c(1,2,3);
 
2次元 、1次元目の要素数2、2次元目の要素数3
a = c(c(1,2,3), c(4,5,6));


値の次元数を求める。
GetValueDimension(Val)

値の次元ごとの要素数
GetValueElement(Val, DimIndex0st)

値の全要素数　配列内カウント
GetValueTotalElement(Val) 

GetUniqueValue

テーブル型配列変数の行と列を入れ替える。
ExchangeTableColRow


配列リストに値が含まれるかどうか
var a1 = c(1,2,1,3);
var a2 = ::IsExist(a1, c(1, 3)); //a2にはc(T, F,T,T)が代入される
var a3 = a1[a2];  

::CombineStr(a, &quot;[&quot;, &quot;]&quot;)

a = ::Revar(a, 200):        // 200個の配列に拡張。
a = ::Revar(a, 300):        // 300個の配列に拡張。最初の200個の値は引き継がれる。
a = ::Revar(a, 200, 100):   // 「var a[200, 100]」と同じ。1次元から2次元配列に変更。

	
var a = c(1,2,3,4);
a = a + 2;
::OpenMsg(::CScript(a)); =&gt; c(3,4,5,6)

*/
">
</OBJ>
</OBJ>
</OBJ>
</FORMROOT>
</ROOT>
