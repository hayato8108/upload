
<?xml version="1.0" encoding="UTF-8"?>
<ROOT>
<FORMROOT clid="Client" Name="Client" StartupSize="DEFAULTFORM" ShowStatusBar="F" PSLoginStartup="AUTO" PSFilePath="cSvr.txt" Product="PA-Panel" Ver="6.0" Rev="13" FileRev="3" FileSaveWithoutDefault="T">
<OBJ clid="Folder" Name="Folder01">
<OBJ clid="Form" Name="Form01_" Height="500" Width="480" VisualTheme="DEFAULT" LocaleLanguage="DEFAULT">
<OBJ clid="EditBox" Name="ebxDev" Text="M0-M10" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" TextAlignX="LEFT" Top="20" Left="120" Height="40" Width="270">
</OBJ>
<OBJ clid="EditBox" Name="ebxFile" Text="test1.csv,test2.csv" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" TextAlignX="LEFT" Top="140" Left="10" Height="40" Width="460">
</OBJ>
<OBJ clid="Button" Name="btnAdd" Text="ADD" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" Top="20" Left="400" Height="40" Width="70" Event="
event OnMouseUp(button)
{
	parent.clsDevice.SetTag();
}
">
</OBJ>
<OBJ clid="Button" Name="btnSet" Text="SET" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" Top="80" Left="330" Height="40" Width="70" Event="
event OnMouseUp(button)
{
	parent.clsCsv.SetCsvCheck();
}">
</OBJ>
<OBJ clid="EditBox" Name="ebxUnit" Text="U01" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" TextAlignX="LEFT" Top="20" Left="10" Height="40" Width="50">
</OBJ>
<OBJ clid="EditBox" Name="ebxFol" Text="F01" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" TextAlignX="LEFT" Top="20" Left="60" Height="40" Width="60">
</OBJ>
<OBJ clid="Label" Text="CsvFolderPath" TextAlignX="LEFT" Top="60" Left="10" Height="20" Width="50">
</OBJ>
<OBJ clid="Label" Text="Folder" TextAlignX="LEFT" Top="0" Left="60" Height="20" Width="50">
</OBJ>
<OBJ clid="ListBox" Name="lbxOut" TextList="" Top="180" Left="10" Height="260" Width="460">
</OBJ>
<OBJ clid="Label" Text="Unit" TextAlignX="LEFT" Top="0" Left="10" Height="20" Width="50">
</OBJ>
<OBJ clid="Rectangle" Name="clsDevice" Text="Device" Border="F" FillColor="#93CDDD" RotateX="40" RotateY="-30" Top="-60" Left="0" Height="50" Width="92" Event="var mvIgnore;
var mvCrrTagCnt;
var mvCsvCmnt;
	
function SetTag()
{
	this.mvIgnore = 0;
	this.mvCrrTagCnt = 0;
	this.ClearAllTag();

	var vTags = parent.ebxDev.Text;
	
	var vRanges = ::CStrToArray(vTags, &quot;,&quot;, T, T);	
	var vCnt  = ::GetValueElement(vRanges, 0);
	
	for ( var i = 0; i &lt; vCnt; i = i + 1 )
	{	
		var vRange;
		if (IsValidRange(vRanges[i], vRange) == F) continue;
		 
		var vDevice = ::MidStr(vRange[0], 0, 1);

		var vHead = ::MidStr(vRange[0], 1);
		var vEnd =  ::MidStr(vRange[1], 1);
		
//		var vAdrs = this.GetConsecutive(vHead, vEnd);
		var vAdrs = ::IntStrs(vHead, vEnd, 4, vDevice);
		
		var vDevHead = ::CStr(parent.ebxUnit.Text + &quot;.&quot; + parent.ebxFol.Text + &quot;.#&quot;);
		
		vAdrs = ::CombineStr(vAdrs, vDevHead, &quot;&quot;);
		this.AddTag(vAdrs);
		this.mvCrrTagCnt = this.mvCrrTagCnt + ::GetValueElement(vAdrs, 0);		
		
	}
}

function IsValidRange(str, &amp;val)
{
	var vRet = T;
	
	
/*
condition here
	var vRange = ::CStrToArray( str, &quot;-&quot;, T, T);
	var vDevice = ::MidStr(vRange[0], 0, 1);
	var vHead = ::MidStr(vRange[0], 1);
	var vEnd =  ::MidStr(vRange[1], 1);
	
	if (::CNum(vEnd) &lt; ::CNum(vHead))
	{
		vRet = F;
	}
	
UpperStr
IsFullWidthChar
*/	
	if (vRet==T) {
		val  = ::CStrToArray( str, &quot;-&quot;, T, T);
		return T;
	} else {
		val = &quot;&quot;;
		parent.lbxOut.AddText(&quot;Invalid Assign&quot;);
		return F;
	}		
}

function GetConsecutive(st, end) //=&gt;Array
{
	var vCnt = end - st + 1;
	var vArr[vCnt];
	for ( var i =  0; i &lt; vCnt ; i = i + 1 )
	{
		vArr[i] = st + i;
	}
	return vArr;
}

event OnTagValueChanged(tagname,value)
{
	while (this.mvIgnore &lt; this.mvCrrTagCnt)
	{
		this.mvIgnore = this.mvIgnore + 1;
		return;
	}
	
	var vCmnt = this.GetDeviceComment();	 
	var vMsg = ::CTimeStr(#NOW#, &quot;%M:%S&quot;) + &quot;   &quot; + ::CStr(tagname) + &quot;      &quot; + ::CStr(value) + vCmnt;
	parent.lbxOut.AddText(vMsg);
}

event OnTerminate()
{
	this.ClearAllTag();
}
">
</OBJ>
<OBJ clid="Rectangle" Name="clsCsv" Text="Csv" Border="F" FillColor="#93CDDD" RotateX="146" RotateY="-35" Top="-60" Left="100" Height="50" Width="92" Event="var mvCnt;
var mvTimeData;

function SetCsvCheck()
{
	if(this.CreateTempFile() == F) return;
 	this.SetTimer(1,100);
 	parent.ebxPath.Enabled = F;
 	parent.ebxFile.Enabled = F;
 	
}

function KillCsvCheck()
{
 	this.KillTimer(1);
 	parent.ebxPath.Enabled = T;
 	parent.ebxFile.Enabled = T;
}

function CreateTempFile()
{
	var vPath;
	var vTmpPath;
	var vFile;
	if (this.GetCsvFol(vFile) == F || this.GetCsvPath(vPath, vTmpPath) == F) 
	{
		parent.lbxOut.AddText(&quot;error : CreateTempFile&quot;);
		return F;
	}
	
	mvCnt = ::GetValueElement(vFile, 0);
	mvTimeData = ::Revar(mvTimeData, mvCnt, 1);	
	for (var i = 0 ; i &lt;mvCnt ; i++ ) {
		var vD;
		::GetFileLastWriteTime(vPath + vFile[i] , vD);
		mvTimeData[ i, 0] = vD; 
		var vLoadData;
		::LoadCsvFile(vPath + vFile[i], vLoadData);
		::SaveCsvFile(vTmpPath + vFile[i], vLoadData);
	}
	return T;
}

function CheckTimeStamp()
{
	var vPath;
	var vTmpPath;
	var vFile;
	if (this.GetCsvFol(vFile) == F || this.GetCsvPath(vPath, vTmpPath) == F) 
	{
		parent.lbxOut.AddText(&quot;error : CheckTimeStamp&quot;);
		return;
	}
	
	for (var i = 0 ; i &lt;mvCnt ; i++ ) {
		var vD;
		::GetFileLastWriteTime(vPath + vFile[i] , vD);
		if (mvTimeData[ i, 0] != vD)
		{
			this.CompareCsvFile(vTmpPath + vFile[i], vPath + vFile[i]);				
			parent.lbxOut.AddText(::CTimeStr(#NOW#, &quot;%M:%S&quot;) + &quot;   &quot; + &quot;file was modified: &quot; + vFile[i]);
			mvTimeData[ i, 0] = vD; 
			var vLoadData;
			::LoadCsvFile(vPath + vFile[i], vLoadData);
			::SaveCsvFile(vTmpPath + vFile[i], vLoadData);
		} 
	}

}


function CompareCsvFile(oldpath, newpath)
{
	var vOld;
	var vNew;
	var vMsg;

	::LoadCsvFile(oldpath, vOld);
	::LoadCsvFile(newpath, vNew);

//TESTER
//	vOld = c(c(&quot;TIMESTAMP&quot;,&quot;1&quot;,&quot;2&quot;), c(&quot;HEADA&quot;,&quot;c&quot;,&quot;c&quot;), c(&quot;HEADB&quot;,&quot;b&quot;,&quot;c&quot;), c(&quot;HEADC&quot;,&quot;b&quot;,&quot;c&quot;), c(&quot;HEADD&quot;,&quot;b&quot;,&quot;c&quot;));
//	vNew = c(c(&quot;TIMESTAMP&quot;,&quot;1&quot;,&quot;2&quot;), c(&quot;HEADA&quot;,&quot;b&quot;,&quot;c&quot;), c(&quot;HEADB&quot;,&quot;b&quot;,&quot;c&quot;), c(&quot;HEADC&quot;,&quot;b&quot;,&quot;c&quot;), c(&quot;HEADD&quot;,&quot;b&quot;,&quot;c&quot;));	
//
	var vCnt = ::GetValueElement(vOld, 0);
	
	var vDataStart = 1; 
	for (var i = vDataStart; i &lt; vCnt ; i++)
	{	
		//All to DiffArray
		var vDiff = vOld[i, ] != vNew[i, ];
		var vS = vOld[0, vDiff];
		var vO = vOld[i, vDiff];
		var vN = vNew[i, vDiff];
		
		//DiffArray to MsgFormat
		var vCntD = ::GetValueElement(vO, 0);
		
		for (var ii = 0; ii &lt; vCntD ; ii++)
		{
			var vOldVal = ::SV(::CStr(vO[ii]) != &quot;&quot; , ::CStr(vO[ii]), &quot;_&quot;);
			var vNewVal = ::SV(::CStr(vN[ii]) != &quot;&quot; , ::CStr(vN[ii]), &quot;_&quot;);

			vMsg = ::CStr(vS[ii]) + &quot;   &quot; + ::CStr(vOld[i, 0]) + &quot;   &quot; + vOldVal +  &quot;   ---&gt;   &quot; +  vNewVal;
			parent.lbxOut.AddText(vMsg);
		}	
	}	
}


event OnTimer(timerid,counter)
{
	if (timerid == 1) this.CheckTimeStamp();
}


function GetCsvFol(&amp;val)
{
	var vRet = T;
/*
condition Here
comma
*/
	if (vRet == T) {
		val = ::CStrToArray(parent.ebxFile.Text , &quot;,&quot;, T, T);
		return T;
	} else {
		val = &quot;&quot;;
		return F;
	}
}


function GetCsvPath(&amp;path, &amp;tmp)
{
	var vRet = T;
/*
condition Here
*/
	if (vRet == T) {
		path = parent.ebxPath.Text &amp; &quot;\&quot;;
		tmp = ::GetTempFolder() + &quot;\&quot;;
		return T;
	} else {
		path = &quot;&quot;;
		tmp = &quot;&quot;;
		return F;
	}
}

">
</OBJ>
<OBJ clid="EditBox" Name="ebxPath" Text="C:\Users\Owner\Documents\workspace\c\testCSV" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" TextAlignX="LEFT" Top="80" Left="10" Height="40" Width="310">
</OBJ>
<OBJ clid="Label" Text="CsvFolderPath" TextAlignX="LEFT" Top="120" Left="10" Height="20" Width="50">
</OBJ>
<OBJ clid="Button" Name="btnKill" Text="CLOSE" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" Top="80" Left="400" Height="40" Width="70" Event="
event OnMouseUp(button)
{
	parent.clsCsv.KillCsvCheck();
}">
</OBJ>
<OBJ clid="Button" Name="btnCls" Text="CLS" TextFont="Meiryo UI,-16,0,400,0,0,0,0,0" Top="450" Left="400" Height="40" Width="70" Event="
event OnMouseUp(button)
{
	parent.lbxOut.Clear();
}

">
</OBJ>
<OBJ clid="Rectangle" Text="MEMO" Border="F" FillColor="#93CDDD" RotateX="-85" RotateY="165" Top="130" Left="-150" Height="70" Width="130" Event="
/*	MEMO


ClearAllTag()


LoadCsvFile
var a;
::LoadCsvFile(&quot;c:\abc.csv&quot;, a);
xxx.Text = a[0, 0];       // 0列目0行目のデータ
xxx.Text = a[0, 1];       // 0列目1行目のデータ
xxx.Text = a[0, ];         // 0列目すべてのデータ
xxx.Text = a[0, 10:20];   // 0列目10行～20行目の11個のデータ
xxx.Text = a[, 0];        // 0行目のすべてのデータ

 
 1次元、1次元目の要素数1
a = 1;  eq  a = c(1);

1次元、1次元目の要素数3
a = c(1,2,3);
 
2次元 、1次元目の要素数2、2次元目の要素数3
a = c(c(1,2,3), c(4,5,6));


値の次元数を求める。
GetValueDimension(Val)

値の次元ごとの要素数
GetValueElement(Val, DimIndex0st)

値の全要素数　配列内カウント
GetValueTotalElement(Val) 

GetUniqueValue

テーブル型配列変数の行と列を入れ替える。
ExchangeTableColRow


配列リストに値が含まれるかどうか
var a1 = c(1,2,1,3);
var a2 = ::IsExist(a1, c(1, 3)); //a2にはc(T, F,T,T)が代入される
var a3 = a1[a2];  

::CombineStr(a, &quot;[&quot;, &quot;]&quot;)

a = ::Revar(a, 200):        // 200個の配列に拡張。
a = ::Revar(a, 300):        // 300個の配列に拡張。最初の200個の値は引き継がれる。
a = ::Revar(a, 200, 100):   // 「var a[200, 100]」と同じ。1次元から2次元配列に変更。

	
var a = c(1,2,3,4);
a = a + 2;
::OpenMsg(::CScript(a)); =&gt; c(3,4,5,6)

*/
">
</OBJ>
<OBJ clid="Rectangle" RotateX="-40" RotateY="30" Top="20" Left="-50" Height="20" Width="20" Event="//CONFIG
//Title
//?float">
</OBJ>
<OBJ clid="ComboBox" Text="コメントリスト　Aタグ　Bコメント" Top="-70" Left="250" Height="40" Width="220">
</OBJ>
</OBJ>
<OBJ clid="Form" Name="Form01" Title="Debug" Height="500" Width="480" VisualTheme="DEFAULT" LocaleLanguage="DEFAULT" FillColor="#F2F2F2" Stretch="RESIZE_FULL" AllowZoom="TRUE" ViewFillColor="#808080" Event="
var g_vCsvData; //[SECTION] array list

function gAddTag(tags)
{
	this.AddTag(tags);
}

function gDelTag(tags)
{
	this.DelTag(tags);
}

function gWriteVal(tag, val)
{
var vType = this.cbxWriteType.Text;
var vVal;

if (::UpperStr(vType) == &quot;NUM&quot;) {
	vVal = ::CNum(val);
}else if (::UpperStr(vType) == &quot;ASC&quot;) {
 //...
} else {
	return;
}
this.WriteVal( tag, vVal);
}

event OnTagValueChanged(tagname,value)
{
	this.grid.fRefreshTable(&quot;&quot;);
}

function fSave(){
if (this.cbxSection.Text == &quot;&quot; || ::UpperStr(this.cbxSection.Text) == &quot;SELECT&quot;|| ::UpperStr(this.cbxSection.Text) == &quot;[END]&quot;) return;
var vLocalFile = ::CStr(this.tbxDefaultCsvPath.Text);
var vCsvData = g_vCsvData;

//CsvData + New =&gt; SaveData
var vCnt = ::GetValueElement(vCsvData, 0);
var vTable;
var vSaveData;
var vSectionName;
var vCrrRow = 0;

this.grid.GetTableData(vTable, &quot;all&quot;);
vTable = ::ExchangeTableColRow(vTable);
vSectionName = this.cbxSection.Text;

for (var i = 0; i &lt; vCnt; i++)
{
	if (vCsvData[i , 0] == vSectionName){
			vSaveData =  ::Revar(vSaveData, vCrrRow + 1, this.grid.Cols);		
			vSaveData[vCrrRow, ]	= &quot;&quot;;
			vSaveData[vCrrRow, 0] = vSectionName;
			vCrrRow++; 
			i++;
				for (var ii = 0; ii &lt; ::GetValueElement(vTable, 0); ii++) {
					vSaveData =  ::Revar(vSaveData, vCrrRow + 1, this.grid.Cols);	
					vSaveData[vCrrRow, 0 : this.grid.Cols] = vTable[ii, 0 : this.grid.Cols];
					vCrrRow++; 					
				}
				
				while (::LeftStr(vCsvData[ i, 0], 1) != &quot;[&quot;) {
					i++;
				}
	} else {
		if (::LeftStr(vCsvData[ i, 0], 1) == &quot;[&quot;){
			vSaveData =  ::Revar(vSaveData, vCrrRow + 1, this.grid.Cols);	
			vSaveData[vCrrRow, ]	= &quot;&quot;;			
			vSaveData[vCrrRow, 0] = vCsvData[ i, 0];
			vCrrRow++; 
			i++;

			while (::LeftStr(vCsvData[ i, 0], 1) != &quot;[&quot;) {
					vSaveData =  ::Revar(vSaveData, vCrrRow + 1, this.grid.Cols);	
					vSaveData[vCrrRow, 0 : this.grid.Cols] = vCsvData[ i, 0 : this.grid.Cols];
					vCrrRow++; 
					i++;
			}
		}
	}
		if(::UpperStr(vCsvData[ i , 0]) == &quot;[END]&quot;) break;
		i--; // - for-loop counter 
}

	vSaveData =  ::Revar(vSaveData, vCrrRow + 1, this.grid.Cols);	
	vSaveData[vCrrRow, ]	= &quot;&quot;;		
	vSaveData[vCrrRow, 0] = &quot;[END]&quot;;
	vSaveData = ::ExchangeTableColRow(vSaveData);
	::SaveCsvFile(::ReplaceStr(vLocalFile, &quot;.&quot;, &quot;_&quot; &amp; ::CTimeStr(#NOW#, &quot;%Y%m%d%m%S&quot;) &amp; &quot;.&quot;), ::ExchangeTableColRow(vCsvData));	
	::SaveCsvFile(vLocalFile, vSaveData);
	this.fLoadCsvData();
	this.lblBuffer.Text = &quot;FileSaved&quot;;
}


function fLoadSectionRow(section) {
//vCsvData[section] =&gt; grid
if (section == &quot;&quot; || ::UpperStr(section) == &quot;SELECT&quot;|| ::UpperStr(section) == &quot;[END]&quot;) return;

this.lblBuffer.Text = &quot;&quot;;
var vCsvData = g_vCsvData;
var vCnt = ::GetValueElement(g_vCsvData, 0);
var vRowData;

for (var i = 0; i &lt; vCnt; i++)
{	
var t = vCsvData[ i, 0];
	if (vCsvData[ i, 0] == section)
	{
	this.grid.ClearData(&quot;all&quot;);
	this.grid.Rows = 0;
	i++;
		while (::LeftStr(vCsvData[ i , 0], 1) != &quot;[&quot;) {
			vRowData =  vCsvData[ i , 0 : this.grid.Cols];
			for (var ii = 0; ii &lt; ::GetValueElement(vRowData, 0); ii++) { 
				if(vRowData[ii] == &quot;N/A&quot;) { vRowData[ii] = &quot;&quot;; } 
			}	
			this.grid.AddRow(1, vRowData);
			i++;
		}
	}
}
this.grid.SetColumnProperty();
}

function fLoadCsvData(){ 
var vCsvData;
var vLocalFile = ::CStr(this.tbxDefaultCsvPath.Text);
if (::LoadCsvFile(vLocalFile, vCsvData, F) == F) return F;

//End flag check
var vCheck = vCsvData[ 0,  ::GetValueTotalElement(vCsvData[ 0,  ]) - 1];
if(::UpperStr(vCheck) != &quot;[END]&quot;) { ::OpenMsg(&quot;Does not found [END]&quot;); return F; }

//Section combo box
var vSection = vCsvData[ 0, ::LeftStr(vCsvData, 1) == &quot;[&quot;]; // section list
this.cbxSection.Clear();
this.cbxSection.Text = &quot;Select&quot;;
this.cbxSection.AddTextList(vSection, T);

vCsvData = ::ExchangeTableColRow(vCsvData);
g_vCsvData = vCsvData;
this.lblBuffer.Text = &quot;FileLoaded&quot;;
}


event OnInitialize()
{
	this.fLoadCsvData();
	this.lblBuffer.Text = &quot;Init&quot;;	
}

event OnKeyUp(keycode,flag)
{
	this.grid.OnKeyUp(keycode,flag);
}
">
<OBJ clid="Button" Name="btnF" Text="0" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" TextColor="#000000" BorderColor="#000000" FillColor="#F2F2F2" Top="60" Left="10" Height="40" Width="54" AutoResizeX="RIGHT" Event="
event OnMouseUp(button)
{
	parent.grid.fWriteValue(0);
}


">
</OBJ>
<OBJ clid="Button" Name="btnRe" Text="Clear" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" TextColor="#000000" BorderColor="#000000" FillColor="#F2F2F2" Top="60" Left="410" Height="40" Width="60" AutoResizeX="RIGHT" Event="
event OnMouseUp(button)
{
parent.grid.ClearData(&quot;all&quot;);
parent.ClearAllTag();
}


">
</OBJ>
<OBJ clid="GridControl" Name="grid" DefaultHeight="30" DefaultWidth="30" Rows="1000" Cols="10" SelectType="BOTH" ScrollMaxWidth="20" ResizeRow="F" Fill="F" Top="110" Left="10" Height="350" Width="460" AutoResizeX="LEFTRIGHT" AutoResizeY="TOPBOTTOM" Event="var m_vSwitch;

event OnInitialize()
{
	this.SetColumnProperty();
} 

function SetColumnProperty(){
	this.SetCellType(&quot;common&quot;, &quot;edit&quot;);
//	this.SetColWidth(0, c(150, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80));
	this.FillHeader();
//	this.SetRowData(-1, c(&quot;WriteTag&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;), F);
	this.fFillIndex();
	//m_vSwitch=F;	
}

function FillHeader(){
var a[this.Cols];
var b[this.Cols];

for (var i = 0; i &lt; this.Cols ; i = i + 1) {
	if(i == 0) {
		a[i] = &quot;WriteTag&quot;;
		b[i] = &quot;150&quot;;
	} else {
		a[i] = ::CStr(i);
		b[i] = &quot;80&quot;;	
	}
}
	this.SetRowData(-1, a, F);
	this.SetColWidth(0, b);	
}


event OnGridMouseDblClick(button, col, row, data)
{
	if (button == 3 &amp;&amp; col != -1) {
		// Write
		var vTable;
		this.GetTableData(vTable, &quot;all&quot;);
		var t = vTable[ 0 ,  row ];
		parent.gWriteVal(vTable[ 0 ,  row ] , data);
		this.fRefreshTable(&quot;&quot;);
		
//		var vTable;
//		var vValue;
//		this.GetTableData(vTable, &quot;all&quot;);
//		parent.gWriteVal(vTable[ 0 ,  row ] , data);
//		parent.ReadRefresh(vTable[ 0 ,  row ]);
//		parent.ReadVal(vTable[ 0 ,  row], vValue);
//		this.SetData(-1, row, vValue);
	}
	
//	if (col == -1) {
//		if(m_vSwitch == F){
//			// Fill Value
//			this.SetColWidth(-1, c(80));
//			m_vSwitch=T; // which is current mode
//			this.fRefreshTable();
//		} else {
//			// Fill Index
//			this.SetColWidth(-1, c(30));
//			m_vSwitch=F;
//			this.fFillIndex();
//		}	
//	}
}

function fFillIndex(){
	for (var i = 0; i &lt; this.Rows; i++)
	{
		this.SetData(-1, i, i + 1);
	}
}


function fRefreshTableData(){
	var vTable;
	this.GetTableData(vTable, &quot;all&quot;);
	vTable =vTable[ 0,  vTable != &quot;&quot;];
	vTable =vTable[ ::LeftStr(vTable, 2) != &quot;//&quot;];
	vTable =vTable[ vTable != #N/A#];
	parent.AddTag(vTable);
	parent.ReadRefresh(vTable);
	
	return  ::GetValueTotalElement(vTable);
}


function fRefreshTable(){
	var vValue;
	var vTable;
	
	this.SetColWidth(-1, c(80));
	
	this.fRefreshTableData();
	this.GetTableData(vTable, &quot;all&quot;);
	for (var i = 0; i &lt; this.Rows; i++)
	{	
			if(::LeftStr(vTable[ 0 ,  i], 2) != &quot;//&quot; &amp;&amp; vTable[ 0 ,  i] != &quot;&quot;) 
			{
				parent.ReadRefresh(vTable[ 0 ,  i ]);
				parent.ReadVal(vTable[ 0 ,  i], vValue);
				this.SetData(-1, i, vValue);
			} else {
				this.SetData(-1, i, &quot;&quot;);
			}
	}
}

function fWriteTargetCol(col){
	var i;
	var vValue;
	var vTable;
	this.GetTableData(vTable, &quot;all&quot;);
	if( col == &quot;&quot; ) return; 
	if( col==&quot;N&quot; ){
		vValue = ::CNum(parent.tbxWriteNum.Text);
		if(::IsNum(vValue) == F) return;
	}
	
	for (i = 0; i &lt; this.Rows; i++)
	{	
		if(::LeftStr(vTable[ 0 ,  i], 2) != &quot;//&quot; &amp;&amp; vTable[ 0 ,  i] != &quot;&quot;) 
		{
			if( col !=&quot;N&quot; ){ vValue = vTable[ col ,  i]; }
			parent.gWriteVal(vTable[ 0,  i], ::CNum(vValue));
		}
	}
	this.fRefreshTable();
}

function fWriteValue(value){
	var vTable;
	this.GetTableData(vTable, &quot;all&quot;);
	
	for (var i = 0; i &lt; this.Rows; i++)
	{	
		if(::LeftStr(vTable[ 0 ,  i], 2) != &quot;//&quot; &amp;&amp; vTable[ 0 ,  i] != &quot;&quot;) 
		{
			parent.gWriteVal(vTable[ 0 ,  i], value);
		}
	}
	this.fRefreshTable();
}

event OnEditChanged(col,row,data)
{
var vValue;
	if(col == 0) {
		if(::LeftStr(data, 2) != &quot;//&quot; &amp;&amp; data != &quot;&quot;) 
			{
				parent.gAddTag(data);
				parent.ReadRefresh(data);
				parent.ReadVal(data, vValue);
				this.SetData(-1, row, vValue);
			} else {
				this.SetData(-1, row, &quot;&quot;);
			}	
	}	
}

event OnKeyUp(keycode,flag)
{

//0x25 : LEFT
//0x26 : UP
//0x27 : RIGHT
//0x28 : DOWN

//0x53 : S


//flag
//・マウスの左ボタンが押されている    1
//・マウスの右ボタンが押されている    2
//・シフトキーが押されている          4
//・コントロールキーが押されている    8
//・マウスの中央ボタンが押されている  16

if (keycode == &quot;0x25&quot; &amp;&amp; flag &amp; 8) {
//LEFT
this.Cols = this.Cols - 1;

} else if (keycode == &quot;0x26&quot; &amp;&amp; flag &amp; 8) {
//UP
this.Rows = this.Rows - 1;

} else if (keycode == &quot;0x27&quot; &amp;&amp; flag &amp; 8) {
//RIGHT
this.Cols = this.Cols + 1;
this.FillHeader();

} else if (keycode == &quot;0x28&quot; &amp;&amp; flag &amp; 8) {
//DOWN
this.Rows = this.Rows + 1;	

} else if (keycode == &quot;0x53&quot; &amp;&amp; flag &amp; 8) {
//S


	parent.fSave();
} else if (keycode == &quot;0x4C&quot; &amp;&amp; flag &amp; 8) {
//L
	parent.fLoadCsvData();
}

}
">
</OBJ>
<OBJ clid="Button" Name="btnF" Text="1" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" TextColor="#000000" BorderColor="#000000" FillColor="#F2F2F2" Top="60" Left="64" Height="40" Width="55" AutoResizeX="RIGHT" Event="
event OnMouseUp(button)
{
	parent.grid.fWriteValue(1);
}


">
</OBJ>
<OBJ clid="Button" Name="btnRe" Text="SAVE" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" TextColor="#000000" BorderColor="#000000" FillColor="#F2F2F2" Top="-50" Left="226" Height="40" Width="64" Event="
event OnMouseUp(button)
{
parent.grid.ClearData(&quot;all&quot;);
parent.ClearAllTag();
}


">
</OBJ>
<OBJ clid="Button" Name="btnRe" Text="LOAD" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" TextColor="#000000" BorderColor="#000000" FillColor="#F2F2F2" Top="-50" Left="40" Height="40" Width="64" AutoResizeX="RIGHT" Event="
event OnMouseUp(button)
{
	parent.fLoadCsvData();
}


">
</OBJ>
<OBJ clid="ComboBox" Name="cbxSection" TextList="" Text="Select" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" Top="10" Left="234" Height="40" Width="236" AutoResizeX="RIGHT" Event="
event OnSelectChanged(index,text)
{
	parent.fLoadSectionRow(this.SelectedText);
	parent.grid.fRefreshTable(&quot;&quot;);
	
}
">
</OBJ>
<OBJ clid="ComboBox" Name="cbxColIndex" TextList="N
1
2
3
4
5
6
7
8
9
" Text="" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" TextAlign="CENTER" Top="60" Left="280" Height="40" Width="67" AutoResizeX="RIGHT">
</OBJ>
<OBJ clid="Button" Name="btnF" Text="Fill" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" TextColor="#000000" BorderColor="#000000" FillColor="#F2F2F2" Top="60" Left="350" Height="40" Width="60" AutoResizeX="RIGHT" Event="
event OnMouseUp(button)
{
	parent.grid.fWriteTargetCol(parent.cbxColIndex.Text);
}


">
</OBJ>
<OBJ clid="EditBox" Name="tbxWriteNum" Text="100" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" Top="60" Left="186" Height="40" Width="94" AutoResizeX="RIGHT">
</OBJ>
<OBJ clid="Rectangle" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" RotateX="20" RotateY="20" Top="10" Left="10" Height="20" Width="20" Event="//CONFIG
//Title
//?float">
</OBJ>
<OBJ clid="Rectangle" Text="Row + =&gt; Ctrl + (Down | Up)
Col + =&gt; Ctrl + (Down | Up)

Ctrl + S =&gt; Save
Ctrl + L =&gt; Load
Ctrl + 1 =&gt; Col1
Ctrl + V =&gt; INPUT DIALOG

" Border="F" FillColor="#93CDDD" RotateX="-130" RotateY="200" Top="110" Left="-240" Height="180" Width="220" Event="
//	
//	
//	}
//	else
//	{
//		var vFields, vTitle, vUnit, vLow, vHigh, vPoint, vValueMember, vValues;
//		var vTemp = &quot;&quot;;
//		var vDecimal = this.m_vDefaultDecimal;
//		var vSize = this.m_vDefaultSize;
//	
//		vFields = ::CStrToArray(vRecord, &quot;,&quot;, T, F);
//
//		if (::GetValueTotalElement(vFields) &gt;= 10)
//		{
//			if (::IsLike(vFields[9], &quot;%&quot; &amp; parent._ActionName &amp; &quot;%&quot;)) {
//				::DivideStr(vFields[9], &quot;.&quot;, &quot;right&quot;, vPoint, vTemp);
//				vPoint = ::ReplaceStr(vPoint, parent._ActionName, &quot;&quot;);
//				::DivideStr(vTemp, &quot;_&quot;, &quot;left&quot;, vValueMember, vTemp);
//				
//				if (::GetStructureTagValue(vPoint, mcMEMBER, vValues) == F){
//					continue;
//				}
//				
//				if(::CORE.gIsInvalidData(vValues[mcMEM_CODE])){
//					vTitle = vValues[mcMEM_NAME] &amp; &quot; &quot; &amp; vValueMember;
//				}else{
//					vTitle = &quot;(&quot; &amp; vValues[mcMEM_CODE] &amp; &quot;) &quot; &amp; vValues[mcMEM_NAME] &amp; &quot; &quot; &amp; vValueMember;
//				}				
//				switch (vValueMember){
//					case &quot;PV&quot;:
//						vLow = vValues[mcMEM_PVTREND_MIN];
//						vHigh = vValues[mcMEM_PVTREND_MAX];
//						vUnit = vValues[mcMEM_UNITS];
//						break;
//					case &quot;SV&quot;:
//						if(vValues[mcMEM_SVTREND_MIN] != #N/A#) {
//							vLow = vValues[mcMEM_SVTREND_MIN];
//							vHigh = vValues[mcMEM_SVTREND_MAX];
//							vUnit = &quot;%&quot;;
//						}else{
//							vLow = vValues[mcMEM_PVTREND_MIN];
//							vHigh = vValues[mcMEM_PVTREND_MAX];
//							vUnit = vValues[mcMEM_UNITS];
//						}
//						break;
//					case &quot;MV&quot;:
//						vLow = vValues[mcMEM_MVTREND_MIN];
//						vHigh = vValues[mcMEM_MVTREND_MAX];
//						vUnit = &quot;%&quot;;
//						break;
//					case &quot;Value&quot;:
//						vLow = 0;
//						vHigh = 1;
//						vUnit = &quot;-&quot;;
//						break;																	
//					default:
//				}
//				this.AddPen(vTitle,vUnit,vFields[2],vFields[3],vFields[4],vLow,vHigh,vFields[7],vFields[8],vFields[9]);
//
//			} else {
//				this.AddPen(vFields[0],vFields[1],vFields[2],vFields[3],vFields[4],vFields[5],vFields[6],vFields[7],vFields[8],vFields[9]);
//			}
//			
//			if(::GetValueTotalElement(vFields) &gt;= 11) {
//				vDecimal = vFields[10]; //vValues[mcMEM_DP];
//				vTemp = ::NS(vDecimal);
//			}
//			if(::GetValueTotalElement(vFields) &gt;= 12) {
//				vSize = vFields[11];
//			}
//
//			vTemp &amp;= &quot;;&quot;;
//			if(vFields[4] == &quot;bar&quot;){
//				this.SetPenPlotSize(vPenIdx , 0, 0, 0, 0, vSize);
//				vTemp &amp;= vFields[4];
//			}else{
//				this.SetPenPlotSize(vPenIdx , vSize, 0, 0, 0, 0);
//			}
//			vTemp &amp;= &quot;;&quot;;
//			vTemp &amp;= ::NS(vSize);
//			this.SetPenProperty(vPenIdx, &quot;Temp&quot;, vTemp);
//			vPenIdx++;
//		}
//	}
//}
//
//parent.GroupBox.RefreshGroupBox(this);	
//
//this.m_ChangeSpanFlg = F;
//////////////////////////////////////////////////////////////////////////
//
//parent.fSelectGroup(::gcTREND_vSelectGroup);
//
//////////////////////////////////////////////////////////////////////////
//
//this.m_ChangeSpanFlg = T;
//SetStartRange();
//
//return T;
//} 
">
</OBJ>
<OBJ clid="Button" Name="btnRe" Text="REL" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" TextColor="#000000" BorderColor="#000000" FillColor="#F2F2F2" Top="-50" Left="104" Height="40" Width="56" AutoResizeX="RIGHT" Event="
event OnMouseUp(button)
{
	parent.fLoadCsvData();
}

">
</OBJ>
<OBJ clid="Button" Name="btnRe" Text="QR" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" TextColor="#000000" BorderColor="#000000" FillColor="#F2F2F2" Top="-50" Left="170" Height="40" Width="56" Event="
">
</OBJ>
<OBJ clid="EditBox" Name="tbxDefaultCsvPath" Text="C:\Users\Owner\Documents\workspace\c\testCSV\test_tagmonitor.csv" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" TextAlignX="LEFT" Top="460" Left="10" Height="30" Width="460" AutoResizeX="LEFTRIGHT" AutoResizeY="BOTTOM">
</OBJ>
<OBJ clid="ListBox" Name="DebugOut" TextList="" Top="340" Left="-520" Height="60" Width="460" Event="//this.DebugOut.AddText(::CStr(vRecord));">
</OBJ>
<OBJ clid="Rectangle" Text="bkp" Border="F" FillColor="#93CDDD" RotateX="-200" RotateY="50" Top="10" Left="-250" Height="80" Width="100" Event="//	
//	var g_vCsvData; //[SECTION] array list
//	
//	function gAddTag(tags)
//	{
//		this.AddTag(tags);
//	}
//	
//	function gDelTag(tags)
//	{
//		this.DelTag(tags);
//	}
//	
//	function gWriteVal(tag, val)
//	{
//	var vType = this.cbxWriteType.Text;
//	var vVal;
//	
//	if (::UpperStr(vType) == &quot;NUM&quot;) {
//		vVal = ::CNum(val);
//	}else if (::UpperStr(vType) == &quot;ASC&quot;) {
// 	//...
//	} else {
//		return;
//	}
//	this.WriteVal( tag, vVal);
//	}
//	
//	event OnTagValueChanged(tagname,value)
//	{
//		this.grid.fRefreshTable(&quot;&quot;);
//	}
//	
//	function fSave(){
//	if (this.cbxSection.Text == &quot;&quot; || ::UpperStr(this.cbxSection.Text) == &quot;SELECT&quot;|| ::UpperStr(this.cbxSection.Text) == &quot;[END]&quot;) return;
//	var vLocalFile = ::CStr(this.tbxDefaultCsvPath.Text);
//	var vCsvData = g_vCsvData;
//	
//	//CsvData + New =&gt; SaveData
//	var vCnt = ::GetValueElement(vCsvData, 0);
//	var vTable;
//	var vSaveData;
//	var vSectionName;
//	var vCrrRow = 0;
//	
//	this.grid.GetTableData(vTable, &quot;all&quot;);
//	vTable = ::ExchangeTableColRow(vTable);
//	vSectionName = this.cbxSection.Text;
//	
//	for (var i = 0; i &lt; vCnt; i++)
//	{
//		if (vCsvData[i , 0] == vSectionName){
//				vSaveData =  ::Revar(vSaveData, vCrrRow + 1, this.grid.Cols);		
//				vSaveData[vCrrRow, ]	= &quot;&quot;;
//				vSaveData[vCrrRow, 0] = vSectionName;
//				vCrrRow++; 
//				i++;
//					for (var ii = 0; ii &lt; ::GetValueElement(vTable, 0); ii++) {
//						vSaveData =  ::Revar(vSaveData, vCrrRow + 1, this.grid.Cols);	
//						vSaveData[vCrrRow, 0 : this.grid.Cols] = vTable[ii, 0 : this.grid.Cols];
//						vCrrRow++; 					
//					}
//					
//					while (::LeftStr(vCsvData[ i, 0], 1) != &quot;[&quot;) {
//						i++;
//					}
//		} else {
//			if (::LeftStr(vCsvData[ i, 0], 1) == &quot;[&quot;){
//				vSaveData =  ::Revar(vSaveData, vCrrRow + 1, this.grid.Cols);	
//				vSaveData[vCrrRow, ]	= &quot;&quot;;			
//				vSaveData[vCrrRow, 0] = vCsvData[ i, 0];
//				vCrrRow++; 
//				i++;
//	
//				while (::LeftStr(vCsvData[ i, 0], 1) != &quot;[&quot;) {
//						vSaveData =  ::Revar(vSaveData, vCrrRow + 1, this.grid.Cols);	
//						vSaveData[vCrrRow, 0 : this.grid.Cols] = vCsvData[ i, 0 : this.grid.Cols];				
//						for (var ii = 0; ii &lt; ::GetValueElement(vSaveData[vCrrRow, ], 0); ii++) { 
//							if(vSaveData[vCrrRow, ii] == &quot;N/A&quot;) { vSaveData[vCrrRow, ii] = &quot;&quot;; } 
//						}
//						vCrrRow++; 
//						i++;
//				}
//			}
//		}
//			if(::UpperStr(vCsvData[ i , 0]) == &quot;[END]&quot;) break;
//			i--; // - for-loop counter 
//	}
//	
//		vSaveData =  ::Revar(vSaveData, vCrrRow + 1, this.grid.Cols);	
//		vSaveData[vCrrRow, ]	= &quot;&quot;;		
//		vSaveData[vCrrRow, 0] = &quot;[END]&quot;;
//		vSaveData = ::ExchangeTableColRow(vSaveData);
//		::SaveCsvFile(::ReplaceStr(vLocalFile, &quot;.&quot;, &quot;_&quot; &amp; ::CTimeStr(#NOW#, &quot;%Y%m%d%m%S&quot;) &amp; &quot;.&quot;), ::ExchangeTableColRow(vCsvData));	
//		::SaveCsvFile(vLocalFile, vSaveData);
//		this.fLoadCsvData();
//		this.lblBuffer.Text = &quot;FileSaved&quot;;
//	}
//	
//	
//	function fLoadSectionRow(section) {
//	//vCsvData[section] =&gt; grid
//	if (section == &quot;&quot; || ::UpperStr(section) == &quot;SELECT&quot;|| ::UpperStr(section) == &quot;[END]&quot;) return;
//	
//	this.lblBuffer.Text = &quot;&quot;;
//	var vCsvData = g_vCsvData;
//	var vCnt = ::GetValueElement(g_vCsvData, 0);
//	var vRowData;
//	
//	for (var i = 0; i &lt; vCnt; i++)
//	{	
//	var t = vCsvData[ i, 0];
//		if (vCsvData[ i, 0] == section)
//		{
//		this.grid.ClearData(&quot;all&quot;);
//		this.grid.Rows = 0;
//		i++;
//			while (::LeftStr(vCsvData[ i , 0], 1) != &quot;[&quot;) {
//				vRowData =  vCsvData[ i , 0 : this.grid.Cols];
//				for (var ii = 0; ii &lt; ::GetValueElement(vRowData, 0); ii++) { 
//					if(vRowData[ii] == &quot;N/A&quot;) { vRowData[ii] = &quot;&quot;; } 
//				}	
//				this.grid.AddRow(1, vRowData);
//				i++;
//			}
//		}
//	}
//	this.grid.SetColumnProperty();
//	}
//	
//	function fLoadCsvData(){ 
//	var vCsvData;
//	var vLocalFile = ::CStr(this.tbxDefaultCsvPath.Text);
//	if (::LoadCsvFile(vLocalFile, vCsvData, F) == F) return F;
//	
//	//End flag check
//	var vCheck = vCsvData[ 0,  ::GetValueTotalElement(vCsvData[ 0,  ]) - 1];
//	if(::UpperStr(vCheck) != &quot;[END]&quot;) { ::OpenMsg(&quot;Does not found [END]&quot;); return F; }
//	
//	//Section combo box
//	var vSection = vCsvData[ 0, ::LeftStr(vCsvData, 1) == &quot;[&quot;]; // section list
//	this.cbxSection.Clear();
//	this.cbxSection.Text = &quot;Select&quot;;
//	this.cbxSection.AddTextList(vSection, T);
//	
//	vCsvData = ::ExchangeTableColRow(vCsvData);
//	g_vCsvData = vCsvData;
//	this.lblBuffer.Text = &quot;FileLoaded&quot;;
//	}
//	
//	
//	event OnInitialize()
//	{
//		this.fLoadCsvData();
//		this.lblBuffer.Text = &quot;Init&quot;;	
//	}
//	
//	event OnKeyUp(keycode,flag)
//	{
//		this.grid.OnKeyUp(keycode,flag);
//	}
">
</OBJ>
<OBJ clid="Label" Name="lblBuffer" Text="Buffer" TextAlignX="LEFT" Top="10" Left="40" Height="20" Width="180">
</OBJ>
<OBJ clid="ComboBox" Name="cbxWriteType" TextList="Num
ASC" Text="Num" TextFont="Meiryo UI,-13,0,400,0,0,0,0,0" TextAlign="CENTER" Top="60" Left="119" Height="40" Width="67" AutoResizeX="RIGHT">
</OBJ>
</OBJ>
</OBJ>
</FORMROOT>
</ROOT>
