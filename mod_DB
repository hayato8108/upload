Option Explicit
'DB 20211028

Dim gTmp As String

'CONVERT XML 2 DB==========================================================

Sub uploadNumberingXml()
Application.ScreenUpdating = False
'If Not ActiveSheet.Tab.ColorIndex = -4142 Then Stop
Dim C As clsXapDebug: Set C = New clsXapDebug
Dim sRet As String
Dim ws As Worksheet
On Error Resume Next

With ThisWorkbook.ActiveSheet
    .Activate
    C.uploadNumberingXml (ActiveSheet.Name)
End With

Set C = Nothing
Application.ScreenUpdating = True
End Sub


Sub downloadFolderXml()

Application.ScreenUpdating = False
Dim d As clsXapDebug: Set d = New clsXapDebug
Dim f As IXMLDOMSelection
Dim sFol As String: sFol = ""
Dim sCid As String
Dim l As Long
Dim sRet As String
Dim sOutWsName As String
sOutWsName = fKey2Val("PGPRM_DB_CLIENT_ROOT", "PGPRM_XML_OUT_SHT", "LinkShtDB")
On Error Resume Next

If sOutWsName = "" Then
   Call DebugOut("ERR", "empty pgprm_xml_out_sht")
Else
    Call SelectOrAddWs(sOutWsName, ThisWorkbook.Name)
    Set ws = Sheets(sOutWsName)
End If
    ws.Activate

sFol = fKey2Val("PGPRM_DB_CLIENT_ROOT", "PGPRM_XML_LOAD_FOLDER", "LinkShtDB")
d.reloadPath
Set f = d.getFolder(sFol)

If f.Length = 0 Then MsgBox "Folder Load Error : " & sFol: Exit Sub
Stop
Call d.downloadFolderXml(f)

Call DebugOut("REM", "alter fgetpgval")
'If fGetPgVal("xml_nrw_Form") = "" And fGetPgVal("xml_nrw_LibName") = "" Then Exit Sub
'
'If fGetPgVal("xml_nrw_Enabled") = 1 Then
'    If fGetPgVal("xml_nrw_Form") <> "#N/A#" And fGetPgVal("xml_nrw_Form") <> "" And d.searchActiveSheetHeaderCol("LibraryComment") <> 0 Then
'        Call d.delUnMatchForm(d.searchActiveSheetHeaderCol("form"), fGetPgVal("xml_nrw_Form"))
'    End If
'    If fGetPgVal("xml_nrw_LibName") <> "#N/A#" And fGetPgVal("xml_nrw_LibName") <> "" And d.searchActiveSheetHeaderCol("form") <> 0 Then
'
'       Call d.delUnMatchRow(d.searchActiveSheetHeaderCol("LibraryComment"), fGetPgVal("xml_nrw_LibName"))
'    End If
'End If

Set d = Nothing
Set f = Nothing
Set fr = Nothing

Application.ScreenUpdating = True
End Sub


Sub downloadFixReport()
Application.ScreenUpdating = False
'If Not ActiveSheet.Tab.ColorIndex = -4142 Then Stop
Dim C As clsXapDebug: Set C = New clsXapDebug
Dim sRet As String

On Error Resume Next

If fGetPgVal("fix_repo_OutSht") = "" Then
    Set ws = ActiveSheet
Else
    Set ws = Sheets(fGetPgVal("fix_repo_OutSht"))
    If ws.Name <> fGetPgVal("fix_repo_OutSht") Then MsgBox "does not exist  : " & fGetPgVal("fix_repo_OutSht"): Exit Sub
End If

With ws
    .Activate
    .Cells.Clear
    .Range(Cells(1, 1), Cells(1, Columns("S").Column)).Value2 = Split("_Index,Object,Top,Left,Width,Height,LibraryComment,_Text,_TagIn,_TagInColor,_TagInVisible,_OpenPic,_Run,_Mes1,_Mes2,_Img,_Hi,_Lo,_Del", ",")
    C.reloadPath
    C.downloadFixReport
End With

Set C = Nothing
Application.ScreenUpdating = True
End Sub


Sub uploadFixReport()
Application.ScreenUpdating = False
'If Not ActiveSheet.Tab.ColorIndex = -4142 Then Stop
Dim C As clsXapDebug: Set C = New clsXapDebug
Dim sRet As String
Dim ws As Worksheet
On Error Resume Next

If fGetPgVal("fix_repo_OutSht") = "" Then
    Set ws = ActiveSheet
Else
    Set ws = Sheets(fGetPgVal("fix_repo_OutSht"))
    If ws.Name <> fGetPgVal("fix_repo_OutSht") Then MsgBox "does not exist  : " & fGetPgVal("fix_repo_OutSht"): Exit Sub
End If

With ws
    .Activate
    C.reloadPath
    C.uploadFixFilterXml
End With

MsgBox "uploaFixReport :" & fGetPgVal("fix_repo_OutPath")

Set C = Nothing
Application.ScreenUpdating = True
End Sub

Sub uploadFixReportB()
Application.ScreenUpdating = False
Application.DisplayAlerts = False
'If Not ActiveSheet.Tab.ColorIndex = -4142 Then Stop
Dim C As clsXapDebug: Set C = New clsXapDebug
Dim vFiles As FileDialog: Set vFiles = Application.FileDialog(msoFileDialogFilePicker)
Dim vSelectFiles As FileDialogSelectedItems
Dim vCnt As Long
Dim sRet As String
Dim wb As Workbook

With vFiles
    .Filters.Clear
'    .Filters.Add "pictureFile", "*.*", 1
    '.Title = "FILE SELECT"
    .AllowMultiSelect = True
    .InitialFileName = fGetPgVal("fix_repo_dir")
    .Show
End With

On Error Resume Next
If vFiles.SelectedItems.Count = 0 Then Exit Sub: Exit Sub
Set wb = Workbooks.Add: wb.Activate

For vCnt = 1 To vFiles.SelectedItems.Count ' 1 base array
    With wb.Worksheets.Add
        .Range(Cells(1, 1), Cells(1, Columns("S").Column)).Value2 = Split("_Index,Object,Top,Left,Width,Height,LibraryComment,_Text,_TagIn,_TagInColor,_TagInVisible,_OpenPic,_Run,_Mes1,_Mes2,_Img,_Hi,_Lo,_Del", ",")
        sRet = fSetPgVal("fix_repo_InPath", vFiles.SelectedItems(vCnt))
        sRet = fSetPgVal("fix_repo_OutPath", fReplace(vFiles.SelectedItems(vCnt), ".ODR", ".xml"))
        C.reloadPath
        C.downloadFixReport
        .Name = fSplit(Dir(vFiles.SelectedItems(vCnt)), 1, ".")
        C.uploadFixFilterXml
    End With
Next vCnt
wb.Sheets("Sheet1").Delete

Set C = Nothing
Application.ScreenUpdating = True
Application.DisplayAlerts = True
End Sub
        
Sub downloadPartsXmlOnSht()

Dim d As clsXapDebug
Set d = New clsXapDebug
d.downloadPartsXmlOnSht

End Sub

'CONVERT EXCEL 2 DB==========================================================

Sub Excel2DbShtRefreshActiveSht()
'For KeyBind
If Not ActiveSheet.Tab.ColorIndex = -4142 And Not ActiveSheet.Tab.ColorIndex = 49 Then Debug.Print "MSG:: Locked": Exit Sub
 'assume that workbook open
Call Excel2DbShtRefresh(ThisWorkbook.Name, ActiveSheet.Name)

End Sub

Function RetCDirTmpWbPath(inptPath As String) As String
Dim sPath As String: sPath = inptPath
Dim sTmpPath As String
    sTmpPath = fReplace(ThisWorkbook.path & "\DB_TmpFile\" & Dir(sPath), ".txt", ".csv")
    RetCDirTmpWbPath = sTmpPath
End Function

Function RetCDirWbPath() As String
Dim sTmpPath As String
    sTmpPath = ThisWorkbook.path & "\" & ThisWorkbook.Name
    RetCDirWbPath = sTmpPath
End Function


Sub JoinLogCsv(inptSelect As String) 'fileld1,field2 ...
Application.DisplayAlerts = False
Application.ScreenUpdating = False

Dim oWbDst As Workbook: Set oWbDst = ThisWorkbook
Dim sTargetPath As String
Dim swsNameBase As String
Dim sWsName As String
Dim sSelect As String: sSelect = "[" & fReplace(inptSelect, ",", "],[") & "]"
Dim vCsvFiles As FileDialog: Set vCsvFiles = Application.FileDialog(msoFileDialogFilePicker)
Dim vSelected As FileDialogSelectedItems
Dim lFrmRSt As Long: lFrmRSt = 1
Dim lFrmREnd As Long
Dim lFrmCEnd As Long
Dim lDstRSt As Long: lDstRSt = 2
Dim lDstREnd As Long
Dim lCnt As Long

With vCsvFiles
    .Filters.Clear
    .Filters.Add "csvFile", "*.csv", 1
    '.Title = "FILE SELECT"
    .AllowMultiSelect = True
    .InitialFileName = "C:\Users\Owner\Documents\workspace\PRJ\DFR\server_data\log\alarmlog"
    .Show
End With

On Error Resume Next
     
If vCsvFiles.SelectedItems.Count = 0 Then Exit Sub

swsNameBase = "TMP_JOIN_LOG_CSV"
sWsName = swsNameBase & "1"
Call SelectOrAddWs(sWsName, ThisWorkbook.Name)
'thisworkbook.Sheets(sWsName).Cells.Clear

With ThisWorkbook.Sheets(sWsName)
    For lCnt = 1 To vCsvFiles.SelectedItems.Count
        sTargetPath = vCsvFiles.SelectedItems(lCnt)
        Call CloseWb(Dir(sTargetPath))
        OpenFileAsWb (sTargetPath)
                       
        lFrmREnd = Workbooks(Dir(sTargetPath)) _
                            .Sheets(fReplace(Dir(sTargetPath), ".csv", "")) _
                            .Cells(Rows.Count, 1).End(xlUp).Row
                            
        lFrmCEnd = Workbooks(Dir(sTargetPath)) _
                            .Sheets(fReplace(Dir(sTargetPath), ".csv", "")) _
                            .Cells(1, Columns.Count).End(xlToLeft).Column
                   
        Workbooks(Dir(sTargetPath)) _
                            .Sheets(fReplace(Dir(sTargetPath), ".csv", "")) _
                            .Range(Cells(lFrmRSt, 1), Cells(lFrmREnd, lFrmCEnd)).Select
        Selection.Copy
       
        lDstREnd = oWbDst.Sheets(sWsName).Cells(Rows.Count, 1).End(xlUp).Row + 1
        If lDstREnd < lDstRSt Then lDstREnd = lDstRSt

        If lDstREnd + lFrmREnd > Rows.Count Then
            sWsName = swsNameBase & CInt(fReplace(sWsName, swsNameBase, "")) + 1
            Call SelectOrAddWs(sWsName, ThisWorkbook.Name)
            lDstREnd = lDstRSt
        End If
        
        oWbDst.Sheets(sWsName).Cells(lDstREnd, 1).PasteSpecial
        
        Workbooks(Dir(sTargetPath)).Close False
    Next lCnt
End With

Application.DisplayAlerts = True
Application.ScreenUpdating = True
End Sub


Function fSplitCsvPrmDec(inptStr As String, inptRetCol As Long) As String
Dim lCol As Long: lCol = inptRetCol
Dim sStr As String: sStr = inptStr
Dim sDec As String: sDec = fSplit(sStr, 2, "DEC:")
Dim sResult As String

If sDec = sStr Then
    sResult = ""
Else
    Select Case lCol
        Case 1
            sResult = fSplit(sDec, 1, "|")
        Case 2
            sResult = fSplit(sDec, 2, "|")
        Case 3
            sResult = fSplit(fSplit(sDec, 3, "|"), 1, "+")
        Case Else
            Stop
    End Select
End If

fSplitCsvPrmDec = sResult

End Function


Function RetXAPBitDevFormat(inptDev As String, inptZero As Boolean, Optional inptDelimiter As String = ".") As String
Dim sDev As String: sDev = inptDev
Dim sDlmt As String: sDlmt = inptDelimiter
Dim sDevL As String
Dim sDevR As String
Dim bZero As Boolean: bZero = inptZero
Dim sResult As String

sDevL = fSplit(sDev, 1, sDlmt)
sDevR = fSplit(sDev, 2, sDlmt)

Select Case sDevR
    Case "A"
        sDevR = 10
    Case "B"
        sDevR = 11
    Case "C"
        sDevR = 12
    Case "D"
        sDevR = 13
    Case "E"
        sDevR = 14
    Case "F"
        sDevR = 15
    Case Else

End Select

If sDevR = "0" And bZero = False Then
    sResult = sDevL
Else
    sResult = sDevL & "@" & sDevR
End If

RetXAPBitDevFormat = sResult

End Function


Function fSplitCsvPrmBin(inptStr As String) As String

Dim sStr As String: sStr = inptStr
Dim sResult As String

If fSplit(sStr, 2, "FLT") <> sStr Then
    sResult = "FLT"
ElseIf fSplit(sStr, 2, "BIN") <> sStr Then
    sResult = "BIN" & fSplitBetweenAlter(sStr, 2, "BIN", "+")
Else
    sResult = ""
End If

fSplitCsvPrmBin = sResult

End Function


'Sub BatchExcel2DbShtRefresh()
'Dim sTabColor As Integer: sTabColor = 49 ' # 123456
'Dim ws As Worksheet
'For Each ws In ThisWorkbook.Worksheets
'    If ws.Tab.ColorIndex = sTabColor Then
'        ws.Activate
'        Excel2DbShtRefresh
'    End If
'Next ws
'End Sub


Private Sub PasteShtData(inptWbName As String, inptShtName As String, inptHeader As Variant) 'A:DEVICE,C:COMMENT1,D:COMMENT2
Dim vHeader As Variant: vHeader = inptHeader
Dim v As Variant
Dim s As String

With Workbooks(inptWbName).Sheets(inptShtName)
For Each v In vHeader
    If Left(Trim(fSplit(v, 1, ":")), 1) = "_" Then
        s = fReplace(v, fSplit(v, 1, ":") & ":", "")
        '_A:Fix;BaseCol;PasteCol;=Formula
        If fSplitBetweenWithDelimiter(s, 2, "[", "]", ",") = "Fix" Then
            .Range(fReplace(fSplit(v, 1, ":"), "_", "") & "1").Value = fSplitBetweenWithDelimiter(s, 1, "[", "]", ",")
            Call fFixFormula(inptWbName _
                                        , inptShtName _
                                        , fSplitBetweenWithDelimiter(s, 3, "[", "]", ",") _
                                        , Trim(fReplace(fSplit(v, 1, ":"), "_", "")) _
                                        , fSplitBetweenWithDelimiter(s, 4, "[", "]", ","))
        ElseIf fSplitBetweenWithDelimiter(s, 2, "[", "]", ",") = "Fill" Then
            Call DebugOut("ERR", "not yet")
        Else
            Call DebugOut("ERR", "fail PasteShtData")
        End If
    Else
        If Not v = "" Then
            .Range(fSplit(v, 1, ":") & "1").Value = _
                fSplit(v, 2, ":")
        End If
    End If
             
Next v
End With
End Sub

'
'Sub DB_EXE_DIFF()
'Application.ScreenUpdating = False
'Dim v As Variant
'Dim sShts As Variant
'Dim vData As Variant
'Dim l As Long
'Dim sSelect As String
'Dim sSqlQuery As String
'Dim sTmpSht As String
'Dim sPrvSht As String
'sShts = Split(fKey2Val("PGPRM_DB_EXE_ROOT", _
'                                    "PGPRM_DB_EXE_DIFF", _
'                                    "LinkShtDB"), ",")
'
'gTmp = ""
'For Each v In sShts
'    sTmpSht = "TMP_" & CStr(v)
'    sPrvSht = fReplace(CStr(v), "DIFF_", "")
'    Call SelectOrAddWs(sTmpSht, ThisWorkbook.Name)
'    Call Excel2DbShtRefresh(ThisWorkbook.Name, sTmpSht)
'
''    cstr(v)
''    freplace(cstr(v),"DIFF_")
'    vData = fGetRowData(ThisWorkbook.Name, "LinkShtDB", CStr(v), "A")
''    vData (5)
'
'    For l = 6 To UBound(vData)
'        If Not (vData(l)) = "" Then
'            sSelect = fSplit(vData(l), 2, ":")
''"PRV"
''"DIFF"
'        End If
'    Next
'
'    sSqlQuery = " SELECT " & vbLf & _
'                        sSelect & vbLf & _
'                        " FROM " & vbLf & _
'                        "[" & prvsht & "$]" & vbLf & _
'                        ""
'
'
'    'GetQueryResultsOnSht(
'Stop
'
'Next v
'Workbooks(Dir(gTmp)).Close False
'ThisWorkbook.Sheets("LinkShtDB").Activate
'Application.ScreenUpdating = True
'End Sub


Sub DB_EXE_CREATESHT()
Application.ScreenUpdating = False
Dim v As Variant
Dim sShts As Variant
sShts = Split(fKey2Val("PGPRM_DB_EXE_ROOT", "PGPRM_DB_EXE_CREATESHT", "LinkShtDB"), ",")

gTmp = ""
For Each v In sShts
    Call SelectOrAddWs(CStr(v), ThisWorkbook.Name)
    Call Excel2DbShtRefresh(ThisWorkbook.Name, CStr(v))
Next v
Workbooks(Dir(gTmp)).Close False
ThisWorkbook.Sheets("LinkShtDB").Activate
Application.ScreenUpdating = True
End Sub


Function retArrayBetween(inptArray As Variant, inptSt As Long, inptEnd As Long) As Variant
Dim vOld As Variant: vOld = inptArray
Dim vNew As Variant: vNew = Array()
Dim v As Variant
Dim l As Long

For l = inptSt To inptEnd
    If Not vOld(l) = "" Then
        ReDim Preserve vNew(l - inptSt)
        vNew(l - inptSt) = vOld(l)
    Else
        retArrayBetween = vNew: Exit Function
    End If
Next l

retArrayBetween = vNew

End Function

Sub Excel2DbShtRefresh(inptWb As String, inptWs As String) ' DstWb, DstWs
Dim wbSRC As Workbook
Dim wbDst As Workbook: Set wbDst = Workbooks(inptWb)
Dim wsDst As Worksheet: Set wsDst = wbDst.Worksheets(inptWs)
Dim vData As Variant
Dim l As Long
Dim lEnd As Long
Dim sPrf As String: sPrf = inptWs 'DB_PLC00_M
Dim sWbLD As String: sWbLD = ThisWorkbook.Name
Dim sWsLD As String: sWsLD = "LinkShtDB"
Dim sWb As String
Dim sWs As String
Dim sStCell As String
Dim sEndCell As String
Dim lEndDst As Integer
Dim vRest As Variant
Dim sPrvWbName As String: sPrvWbName = ""
                
wsDst.Rows("2:" & Rows.Count).Clear
wsDst.Rows("2:" & Rows.Count).NumberFormat = "@"

With Workbooks(sWbLD).Sheets(sWsLD)
lEnd = .Cells(.Rows.Count, 1).End(xlUp).Row
    For l = 1 To lEnd
        'search link key
        If Not .Cells(l, 1).Value = "" And Left(.Cells(l, 1).Value, Len(sPrf)) = sPrf Then ' DB_XXX_XX
            'append range
            vData = fGetRowData(sWbLD, sWsLD, .Cells(l, 1).Value, "A")  'row => [link parameter]
            If UBound(vData) = -1 Then Debug.Print "does not match": Exit Sub
                sWb = CStr(vData(2))
                sWs = CStr(vData(3))
                sStCell = CStr(vData(4))
                sEndCell = CStr(vData(5))
                vRest = retArrayBetween(vData, 6, UBound(vData))

                If Not gTmp = RetCDirTmpWbPath(sWb) Then
                    Call CloseWb(Dir(gTmp))
                    Call CloseWb(Dir(sWb))
                    Call CloseWb(Dir(RetCDirTmpWbPath(sWb)))
                    FileCopy sWb, RetCDirTmpWbPath(sWb)
                    sWb = RetCDirTmpWbPath(sWb)
                    OpenFileAsWb (sWb)
                    gTmp = sWb
                End If

                Set wbSRC = Workbooks(Dir(sWb))
                lEndDst = wsDst.Cells(Rows.Count, 1).End(xlUp).Row + 1
                wbSRC.Sheets(sWs).Range(sStCell & ":" & sEndCell).Copy
                wsDst.Activate
                wsDst.Cells(lEndDst, 1).Select
                wsDst.PasteSpecial
                
                 If Not (UBound(vRest)) = -1 Then
                    ThisWorkbook.Sheets(sPrf).Rows(1).Clear
                    Call PasteShtData(ThisWorkbook.Name, sPrf, vRest)
                End If
                
                wsDst.Columns.AutoFit
                wbSRC.Sheets(sWs).Range("A1").Copy
        End If
    Next l
End With

wsDst.Range("A1").Activate
End Sub




Sub ChangeShtVisible(inptBool As Boolean, inptShts As String)
Dim s As Worksheet
Dim sName As String
Dim v As Variant
Dim vShts As Variant: vShts = Split(inptShts, ",")
Dim vBool As Boolean: vBool = inptBool

For Each v In vShts
    sName = v
    For Each s In ThisWorkbook.Worksheets
        If Left(s.Name, Len(sName)) = sName Then s.Visible = vBool
    Next s
Next v

End Sub


Sub SortSht(inptShts As String)
Dim s As Worksheet
Dim sName As String
Dim v As Variant
Dim vShts As Variant: vShts = Split(inptShts, ",")

For Each v In vShts
    sName = v
    For Each s In ThisWorkbook.Worksheets
        If Left(s.Name, Len(sName)) = sName Then s.Move before:=Sheets(1)
    Next s
Next v

End Sub


'=========================================================
'COL END => AZ
'
