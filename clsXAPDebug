'210503

Private Base_ As clsXapDomDoc
Private InPath_ As String
Private OutPath_ As String
Private Dom_ As DOMDocument60

Public Property Let inPath(inpt As String)
InPath_ = inpt
Set Dom_ = Base_.loadClientFile(InPath_)
End Property

Public Property Let outPath(inpt As String)
OutPath_ = inpt
End Property

Property Get dom() As DOMDocument60
    Set dom = Dom_
End Property

'Property Get folderName() As String
'    folderName = folderName_
'End Property
'
'Public Property Let folderName(inpt As String)
'    folderName_ = inpt
'End Property
'
Function getFolder(inptName As String) As IXMLDOMNodeList 'as Alias

Dim vRslt As IXMLDOMNodeList
Set vRslt = Dom_.SelectNodes("//FORMROOT/OBJ[@clid='Folder'][@Name='" & inptName & "']")
Set getFolder = vRslt
Set vRslt = Nothing

End Function

Function getForm(inptFol As String, inptFrm As String) As IXMLDOMNodeList 'as Alias

Dim vRslt As IXMLDOMNodeList
Set vRslt = Dom_.SelectNodes("//FORMROOT/OBJ[@clid='Folder'][@Name='" & inptFol & "']/OBJ[@clid='Form'][@Name='" & inptFrm & "']")
Set getForm = vRslt
Set vRslt = Nothing

End Function

Function selectNodesEX(inpt As String) As IXMLDOMNodeList
'[@clid='Folder'][@Name='Folder01']

Dim vRslt As IXMLDOMNodeList
Set vRslt = Dom_.SelectNodes("//FORMROOT/OBJ" & inpt)
Set selectNodesEX = vRslt
Set vRslt = Nothing

End Function


Sub downloadXml(inptList As IXMLDOMSelection)
'Set d = New clsXapDebug: _
'd.inPath = "C:\Users\Owner\Documents\workspace\XAP_CNV\MF_TESTER.xml": _
'Set f = d.getFolder("Menu1"): _
'd.downloadXml (f)
Application.ScreenUpdating = False

Dim vWs As Worksheet: Set vWs = ActiveSheet
Dim vFolders As IXMLDOMNodeList: Set vFolders = inptList
Dim vFolder As IXMLDOMElement
Dim vForms As IXMLDOMElement
Dim vObj As IXMLDOMElement
Dim sFolderName As String: sFolderName = ""
Dim sFormName As String: sFormName = ""
Dim lCol As Long: lCol = 2
Dim lCnt As Long: lCnt = 1
Dim l As Long: l = 0

With vWs
    .Range(Cells(2, 1), Cells(Rows.Count, Columns.Count)).Clear
    .Range(Cells(2, 1), Cells(Rows.Count, Columns.Count)).NumberFormatLocal = "@"
    .Range("A1").Interior.Color = RGB(255, 155, 155)
    .Range("A2").Activate

    If vFolders Is Nothing Then Exit Sub
    
    For l = 0 To vFolders.Length - 1
        Set vFolder = vFolders.Item(l)
        sFolderName = vFolder.Attributes.getNamedItem("Name").Text

            For Each vForms In vFolder.ChildNodes
                If vForms.Attributes.getNamedItem("clid").Text = "Form" Then sFormName = vForms.Attributes.getNamedItem("Name").Text
                    For Each vObj In vForms.ChildNodes

                    .Range("A1").Interior.Color = RGB(55, 155, 255)
                    ActiveCell.Value = " " & lCnt & " " 'Column A
    
                        Do While .Cells(1, lCol).Value <> "" 'field Attrs
                            If .Cells(1, lCol).Value = "Folder" Then
                              ActiveCell.Offset(0, lCol - 1) = sFolderName
                            ElseIf .Cells(1, lCol).Value = "Form" Then
                               ActiveCell.Offset(0, lCol - 1) = sFormName
                            ElseIf .Cells(1, lCol).Value = "Event" Then
                                If vObj.Attributes.getNamedItem(.Cells(1, lCol).Value).Text <> "" Then
                                   ActiveCell.Offset(0, lCol - 1) = eventRegx(vObj.Attributes.getNamedItem(.Cells(1, lCol).Value).Text): End If
                            ElseIf Not IsNull(vObj.getAttribute(.Cells(1, lCol).Value)) Then 'Attribute
                                ActiveCell.Offset(0, lCol - 1) = vObj.Attributes.getNamedItem(.Cells(1, lCol).Value).Text
                            End If
                            
                            lCol = lCol + 1
                        Loop
    
                    lCnt = lCnt + 1 'display number
                    lCol = 2 ' reset
                    ActiveCell.Offset(1, 0).Activate
                
                    Next vObj
            Next vForms
        Next l

    .Columns.AutoFit
    .Range("A1").Activate

End With

Set vDoc = Nothing
Set vFolder = Nothing
Set vobh = Nothing
Application.ScreenUpdating = True
End Sub


Function eventRegx(inpt As String) As String
Stop
Dim str As String
Dim oArr As Object: Set oArr = CreateObject("System.Collections.ArrayList")
Dim regx As Object: Set regx = CreateObject("vbscript.regexp")
Dim oMatch As Object

    With regx
        .Global = inptGlobal 'isMultiple
        .MultiLine = False
        .ignorecase = False
    End With

        .Pattern = inptPattern
If regx.test(inptStr) Then
    Set oMatch = regx.Execute(inptStr)
End If


eventRegx = ""


End Function

Function multiCndRegx() As Variant

End Function


Sub createFixFilterXml(inptFrm As IXMLDOMSelection)
'Set d = New clsXapDebug: _
'd.inPath = "C:\Users\Owner\Documents\workspace\XAP_CNV\TESTER.xml": _
'd.outPath = "C:\Users\Owner\Documents\workspace\XAP_CNV\TESTER_OUT.xml": _
'Set fm = d.getForm("Folder01", "Form02"): _
'd.createFixFilterXml (fm)

Application.ScreenUpdating = False

Dim vWs As Worksheet: Set vWs = Sheets(fKey2Val("PrmSht", "FixFilter"))
Dim vDoc As DOMDocument60
Dim vDom As clsXapDomDoc: Set vDom = Base_
Dim vForm As IXMLDOMSelection: Set vForm = inptFrm
Dim vFilter As IXMLDOMElement
Dim lCol As Long: lCol = 2

With vWs
    .Range("A1").Interior.Color = RGB(255, 155, 155)
    .Activate
    .Range("A2").Activate

    Do While ActiveCell.Value <> "" ' row direction
        
        Set vFilter = vDom.createRedFilter(0, 0, 0, 0) 'single elem
        Set vFilter = vDom.setAttributesEx(vFilter, "LibraryClass", "p_FixFil")
        Set vFilter = vDom.setAttributesEx(vFilter, "Customize", _
         "[Property]" & vbLf & _
        "_TagIn1=[tag_in];NotDefined:#NOTDEF#" & vbLf & _
        "_Comment1=[string]" & vbLf)

        Do While .Cells(1, lCol).Value <> "" 'field Attrs <--->

                    Select Case .Cells(1, lCol).Value
                        Case "Top"
                            Set vFilter = vDom.setAttributesEx(vFilter, "Top", CStr(.Cells(ActiveCell.Row, lCol).Value))
                        Case "Left"
                            Set vFilter = vDom.setAttributesEx(vFilter, "Left", CStr(.Cells(ActiveCell.Row, lCol).Value))
                        Case "Width"
                            Set vFilter = vDom.setAttributesEx(vFilter, "Width", CStr(.Cells(ActiveCell.Row, lCol).Value))
                        Case "Height"
                            Set vFilter = vDom.setAttributesEx(vFilter, "Height", CStr(.Cells(ActiveCell.Row, lCol).Value))
                        Case "_TagIn"
                            Set vFilter = vDom.setAttributesEx(vFilter, "_TagIn1", CStr(.Cells(ActiveCell.Row, lCol).Value))
                        
                    End Select
    
                 lCol = lCol + 1
          Loop ' field Attrs
    
        vForm.Item(0).appendChild vFilter
        lCol = 2

        ActiveCell.Offset(1, 0).Activate 'row direction
    Loop

    .Range("A1").Activate 'iterate end
End With

Dim sDoc As String

sdom = "<?xml version=""1.0"" encoding=""UTF-8""?><ROOT><FORMROOT clid=""Client"" Name=""Client"" Product=""PA-Panel"" Ver=""6.0"" Rev=""12.1"" FileRev=""3"" FileSaveWithoutDefault=""T""><OBJ clid=""Folder"" Name=""Add"">REPLACE</OBJ></FORMROOT></ROOT>"
sdom = Replace(sdom, "REPLACE", vForm.Item(0).XML)

Call SaveTextWithUtf8(sdom, OutPath_)
Set vDoc = Nothing

Application.ScreenUpdating = True
End Sub

Sub printInfo()
    Debug.Print "------------------------------------------------------------------"
    Debug.Print " path in: " & InPath_
    Debug.Print " path out: " & OutPath_
    Debug.Print "------------------------------------------------------------------"
End Sub

Private Sub class_initialize()
    Dim obj As clsXapDomDoc
    Set obj = New clsXapDomDoc
    Set Base_ = obj

'    InPath_ = fKey2Val("PrmSht", "XML_LOAD_PATH")

End Sub


