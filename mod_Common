Option Explicit
'common 20211024

Sub DebugOut(inptCategory As String, inptMsg As String)
Dim v As Variant
Dim oArr As Object: Set oArr = CreateObject("System.Collections.ArrayList")
Dim i As Integer


oArr.Add "MUST"

oArr.Add "ROOT"
oArr.Add "SUB_ST"
oArr.Add "GET_QUERY" 'from GetQueryOnSht
oArr.Add "MARK"
oArr.Add "UTIL"
oArr.Add "REM"
'oArr.Add "RET_QUERY_SELECT"
oArr.Add "SQL_ERR"
oArr.Add "ERR"
oArr.Add "XML_PROC"

oArr.Add "DEBUG"


For Each v In oArr
    If v = UCase(inptCategory) Then
            Debug.Print Format(Now(), "MM:SS") & _
            WorksheetFunction.Rept(" ", 5) & _
            v & " : " & inptMsg
    End If
Next v

End Sub


'PRJ PARAM===============================================================
'Sub LoadKeyBind()
'Dim r As Range
'    Worksheets("KEY_BIND").Select
'    For Each r In Range("A:A")
'        If r.Value = "s" Then
'            Call Application.OnKey(r.Offset(0, 1).Value, r.Offset(0, 2).Value)
'        ElseIf r.Value = "d" Then
'            Call Application.OnKey(r.Offset(0, 1).Value, "")
'        End If
'    Next r
'End Sub

'PRJ PARAM===============================================================
Function fGetDsWb() As String
    fGetDsWb = fGetPgVal("DS_WB")
End Function

Function fGetDsWbn() As String
    fGetDsWbn = fGetPgVal("DS_WBN")
End Function

Function fGetDsWs() As String
    fGetDsWs = fGetPgVal("DS_WS")
End Function

Function fGetDsRng() As String
    fGetDsRng = fGetPgVal("DS_RNG")
End Function

Function fGetPlcUnitData()
    fGetPlcUnitData = fGetPgVal("PLC_UNIT_DATA")
End Function

'Linker===============================================================

'
'Function fGetPgVal(inptKey As String) As String
'Dim sKey As String: sKey = inptKey
'Dim sResult As Variant
'Dim lIndex As Long
'
'Dim sWb As String: sWb = ThisWorkbook.Name
'Dim sWs As String: sWs = "pgParams"
'Dim sKeyCol As String: sKeyCol = "A"
'Dim sRtnCol As String: sRtnCol = "B"
'
'sResult = fGetCellData(sWb, sWs, sKey, sKeyCol, sRtnCol)
'fGetPgVal = sResult
'
'End Function
'
'Function fSetPgVal(inptKey As String, inptVal As String) As Boolean
'Dim sWbName As String:  sWbName = ThisWorkbook.Name
'Dim sWsName As String:  sWsName = "pgParams"
'Dim sKey As String: sKey = inptKey
'Dim sMatchRow As String
'Dim sRslt As String
'On Error Resume Next
'
'With Workbooks(sWbName).Worksheets(sWsName)
'    Dim rRow As Range
'    Set rRow = .Columns(1)
'        If rRow Is Nothing Then fSetPgVal = False: Exit Function  ' "Book or Sheet name is wrong"
'        sMatchRow = Application.WorksheetFunction.Match(sKey, rRow, 0)
'        If sMatchRow = "" Then sMatchRow = Application.WorksheetFunction.Match(CLng(sKey), rRow, 0)
'
'        If sMatchRow <> "" Then
'            .Cells(sMatchRow, 2).Value = inptVal
'        Else
'            fSetPgVal = False: Exit Function
'        End If
'
'    fSetPgVal = True
'End With
'
'End Function

'
'Function fSetVal(inptKey As String, inptVal As String) As Boolean
'Dim sWbName As String:  sWbName = ThisWorkbook.Name
'Dim sWsName As String:  sWsName = "Params"
'Dim sKey As String: sKey = inptKey
'Dim sMatchRow As String
'Dim sRslt As String
'On Error Resume Next
'
'With Workbooks(sWbName).Worksheets(sWsName)
'    Dim rRow As Range
'    Set rRow = .Columns(1)
'        If rRow Is Nothing Then fSetVal = False: Exit Function
'        sMatchRow = Application.WorksheetFunction.Match(sKey, rRow, 0)
'        If sMatchRow = "" Then sMatchRow = Application.WorksheetFunction.Match(CLng(sKey), rRow, 0)
'
'        If sMatchRow <> "" Then
'            .Cells(sMatchRow, 2).Value = inptVal
'        Else
'            fSetVal = False: Exit Function
'        End If
'
'    fSetVal = True
'End With
'
'End Function


Function fKey2Val(inptLabel As String, inptKey As String, Optional inptsht As String = "LinkSht") As String
Dim sLabel As String: sLabel = inptLabel
Dim sKey As String: sKey = inptKey
Dim sData As Variant
Dim sResult As Variant
Dim sShtName As String: sShtName = inptsht
Dim rRng As Range: Set rRng = ThisWorkbook.Sheets(sShtName).Rows(1)
Dim lIndex As Long
Dim bMatch As Boolean

sData = fGetRowData(ThisWorkbook.Name, rRng.Worksheet.Name, sLabel, "A") 'single row, get link parameters

If UBound(sData) = -1 Then fKey2Val = "#N/A#": Exit Function

Dim sWb As String: sWb = sData(2)
Dim sWs As String: sWs = sData(3)
Dim sKeyCol As String: sKeyCol = sData(4)
Dim sRtnCol As String: sRtnCol = sData(5)

sResult = fGetCellData(sWb, sWs, sKey, sKeyCol, sRtnCol)
fKey2Val = sResult

End Function


Function fPref2firstMatch(inptPref As String, inptKey As String, inptMatch As Boolean, Optional inptsht = "LinkSht") As String
'itelate LinkSht sheet and match then return value and exit function
Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(inptsht)
Dim l As Long
Dim lEnd As Long
Dim sPrf As String: sPrf = inptPref
Dim sKey As String: sKey = inptKey
Dim sRslt As String: sRslt = "#N/A#"
Dim bMatch As Boolean

With ws
lEnd = .Cells(Rows.Count, 1).End(xlUp).Row
    For l = 1 To lEnd
        If Not .Cells(l, 1).Value = "" Then
                If Left(.Cells(l, 1).Value, Len(sPrf)) = sPrf Then
                        sRslt = fKey2Val(.Cells(l, 1).Value, sKey)
                If Not sRslt = "#N/A#" Then fPref2firstMatch = sRslt: Exit Function
            End If
        End If
    Next l
End With

    fPref2firstMatch = sRslt

End Function



'on Target Sheet
Private Function fGetCellData(inptWb As String, inptWs As String, inptKey As String, inptKeyCol As String, inptTargetCol As String) As String

Dim sWbName As String: sWbName = inptWb
Dim sWsName As String: sWsName = inptWs
Dim sKeyCol As String: sKeyCol = inptKeyCol
Dim sKey As String: sKey = inptKey
Dim sTargetCol As String: sTargetCol = inptTargetCol
Dim sMatchRow As String
Dim sRslt As String
On Error Resume Next

With Workbooks(sWbName).Worksheets(sWsName)

    Dim rColKey As Range
    Set rColKey = .Columns(.Cells.Columns(sKeyCol).Column)
    If rColKey Is Nothing Then
        Call DebugOut("ERR", "fGetCellData get worksheet range fail " & vbNewLine & _
                                         "assume that worksheet name is collect " & vbNewLine & _
                                        "InptKey : " & inptKey & vbNewLine & _
                                         "WbName : " & sWbName & vbNewLine & _
                                         "WsName : " & sWsName)
        fGetCellData = "#N/A#": Exit Function
    End If
    
    sMatchRow = Application.WorksheetFunction.Match(sKey, rColKey, 0)
    If sMatchRow = "" Then sMatchRow = Application.WorksheetFunction.Match(CLng(sKey), rColKey, 0)
    If sMatchRow <> "" Then
        sRslt = .Cells(CLng(sMatchRow), sTargetCol).Value
    Else
        sRslt = "#N/A#"
    End If
End With

fGetCellData = sRslt

End Function

'row direction serarch, on Params sheet
Function fGetRowData(inptWb As String, inptWs As String, inptKey As String, inptKeyCol As String) As Variant

Dim sWbName As String: sWbName = inptWb
Dim sWsName As String: sWsName = inptWs
Dim sKeyCol As String: sKeyCol = inptKeyCol
Dim sKey As String: sKey = inptKey
'Dim sTargetCol As String: sTargetCol = inptTargetCol
Dim sMatchRow As String
Dim vRslt As Variant

On Error Resume Next
With Workbooks(sWbName).Worksheets(sWsName)

    Dim rColKey As Range
    Set rColKey = .Columns(.Cells.Columns(sKeyCol).Column)
    If rColKey Is Nothing Then fGetRowData = Array()
    sMatchRow = Application.WorksheetFunction.Match(sKey, rColKey, 0)
    If sMatchRow <> "" Then
            vRslt = Application.Transpose(Application.Transpose(.Rows(CLng(sMatchRow)).Value))
        Else
            vRslt = Array()
    End If

End With

fGetRowData = vRslt

End Function


'DEBUG OUT===============================================================
Sub out(ByVal inptArr As Variant, Optional inptLimit As Long = 30)
    Dim v As Variant
    Dim cnt As Long: cnt = 0

If UBound(inptArr) > inptLimit Then Call DebugOut("ERR", "out limit : " & inptLimit)

    If CndOrEq(Array("IMatchCollection2", "Variant()", "ArrayList", "String()"), TypeName(inptArr)) Then
        For Each v In inptArr
            Debug.Print CStr(v)
            cnt = cnt + 1
            If cnt = inptLimit Then Exit Sub
        Next v
    Else
        Debug.Print inptArr
    End If
End Sub


Sub outTxt(ByVal inptStr As String, ByVal inptPath As String)
Dim fst As Object
Dim sPath As String: sPath = inptPath

Set fst = CreateObject("ADODB.Stream")
fst.Type = 2 'Specify stream type - we want To save text/string data.
fst.Charset = "utf-8" 'Specify charset For the source text data.
fst.Open 'Open the stream And write binary data To the objectg
fst.WriteText inptStr
fst.SaveToFile inptPath, 2
fst.Close

Set fst = Nothing

End Sub


'OPERATOR==================================================================

Function CndOrEq(ByVal inptArray As Variant, ByVal inptCond As String) As Boolean
    CndOrEq = CndOr(inptArray, "Eq", inptCond)
End Function

Function CndAndEq(ByVal inptArray As Variant, ByVal inptCond As String) As Boolean
    CndAndEq = CndAnd(inptArray, "Eq", inptCond)
End Function

Function CndAndEqSeq(ByVal inptArray As Variant, ByVal inptCond As String) As Boolean
    CndAndEqSeq = CndAnd(inptArray, "EqSeq", inptCond)
End Function

Private Function CndOr(ByVal inptArray As Variant, ByVal inptOperator As String, inptCond As String) As Boolean
    Dim vArr As Variant: vArr = inptArray
    Dim lCnt As Long
    Dim sOpr As String: sOpr = inptOperator
    Dim sCnd As String: sCnd = inptCond
    Dim sResult As Boolean: sResult = False

    For lCnt = 0 To UBound(vArr)
        Select Case sOpr
            Case "Eq"
                If vArr(lCnt) = sCnd Then sResult = True
        End Select

    Next lCnt

    CndOr = sResult

End Function

Private Function CndAnd(ByVal inptArray As Variant, ByVal inptOperator As String, ByVal inptCond As String) As Boolean
    Dim vArr As Variant: vArr = inptArray
    Dim lCnt As Long
    Dim sOpr As String: sOpr = inptOperator
    Dim sCnd As String: sCnd = inptCond
    Dim sResult As Boolean: sResult = True

    For lCnt = 0 To UBound(vArr)
        Select Case sOpr
            Case "Eq"
                If Not vArr(lCnt) = sCnd Then sResult = False
            Case "EqSeq"
                If vArr(lCnt) = False Then
                    sResult = False
                    Exit Function
                End If

        End Select

    Next lCnt

    CndAnd = sResult
End Function

'TYPE CHECK==================================================================
Function fIsSameType(ByVal inptArray As Variant, ByVal inptType As String) As Variant
    Dim vArr As Variant: vArr = inptArray
    Dim lCnt As Long
    Dim sResult As String: sResult = True

    If Not CndOrEq(Array("Integer", "String", "Variant"), inptType) Then
        Stop
    End If

    For lCnt = 0 To UBound(vArr)
        If Not TypeName(vArr(lCnt)) = inptType Then
            sResult = False
        End If
    Next lCnt

    fIsSameType = sResult

End Function

'STRING MANIPULATION=================================================
'Delimiter is not optional
Function fSplitByDelimiter(ByVal inptStr As String, ByVal inptSplt As String, ByVal inptCol As Integer) As String

fSplitByDelimiter = fSplit(inptStr, inptCol, inptSplt)

End Function



Function fSplit(ByVal inptStr As String, ByVal inptCol As Integer, Optional ByVal inptSplt As String = ",", Optional inptMatch As Boolean = False) As String

Dim sStr As String: sStr = inptStr
Dim lCol As Integer: lCol = inptCol
Dim sSplt As String: sSplt = inptSplt
Dim sRslt As String
Dim aStr() As String

aStr = Split(sStr, sSplt)

If UBound(aStr) = -1 Or UBound(aStr) = 0 Or lCol = 0 Then
    sRslt = sStr
ElseIf lCol > UBound(aStr) + 1 Then
    sRslt = sStr
ElseIf lCol < 0 Then
    sRslt = aStr(UBound(aStr) + 1 + lCol)
Else
    sRslt = aStr(lCol - 1)
End If


If inptMatch = True And sRslt = inptStr Then sRslt = ""

fSplit = sRslt

End Function


Function fSplitBetweenWithDelimiter(ByVal inptStr As String, ByVal inptCol As Integer, ByVal inptLeft As String, ByVal inptRight As String, inptDelimiter) As String
Dim sStr As String: sStr = inptStr
Dim lCol As Long: lCol = inptCol
Dim sDLeft As String: sDLeft = inptLeft
Dim sDMid As String: sDMid = inptRight & inptDelimiter & inptLeft
Dim sDRight As String: sDRight = inptRight
Dim sResult As String

If lCol = 1 Then
    sResult = fSplit(sStr, inptCol, sDMid)
    sResult = Right(sResult, Len(sResult) - Len(sDLeft))
ElseIf lCol = UBound(Split(sStr, sDMid)) + 1 Then
    sResult = fSplit(sStr, inptCol, sDMid)
    sResult = Left(sResult, Len(sResult) - Len(sDRight))
Else
    sResult = fSplit(sStr, inptCol, sDMid)
End If

fSplitBetweenWithDelimiter = sResult

End Function


Function fSplitBetween(ByVal inptStr As String, ByVal inptCol As Integer, ByVal inptLeft As String, ByVal inptRight As String, Optional inptDelimiter As String = "") As String
Dim sStr As String: sStr = inptStr
Dim l As Long
Dim ll As Long
Dim lLenL As Long: lLenL = Len(inptLeft)
Dim lLenR As Long: lLenR = Len(inptRight)
Dim lCnt As Long: lCnt = 0
Dim sResult As String

For l = 1 To Len(sStr)
    If Mid(sStr, l, lLenL) = inptLeft Then
        l = l + lLenL
        lCnt = lCnt + 1
        ll = l
        sResult = ""
            Do Until Mid(sStr, ll, lLenR) = inptRight
                sResult = sResult + Mid(sStr, ll, 1)
                ll = ll + 1
                If ll = 100 Then Stop
            Loop
        l = ll
        If lCnt = inptCol Then fSplitBetween = sResult: Exit Function
        End If
Next l

End Function


Function fSplitBetweenAlter(ByVal inptStr As String, ByVal inptCol As Integer, ByVal inptLeft As String, ByVal inptRight As String, Optional inptMatch As Boolean = False) As String
Dim sStr As String: sStr = inptStr
Dim l As Long

Dim sResult As String
Dim bFlag As Boolean: bFlag = False

sResult = fSplit(inptStr, inptCol, inptLeft)
If sResult = inptStr Then bFlag = True

sResult = fSplit(sResult, 1, inptRight)
If sResult = inptStr Then bFlag = True

If inptMatch = True And bFlag = True Then sResult = ""

fSplitBetweenAlter = sResult

End Function


Function fLenOfSplited(inptStr As String, inptSplt As String, inptCol As Long) As String
'for Decimal

Dim sStr As String: sStr = inptStr
Dim lCol As Long: lCol = inptCol
Dim sSplt As String: sSplt = inptSplt
Dim aStr() As String
Dim sRslt As String

aStr = Split(sStr, sSplt)

If UBound(aStr) = 0 Or lCol = 0 Then
    sRslt = 0
Else
    sRslt = Len(aStr(lCol - 1))
End If

fLenOfSplited = sRslt

End Function


'ARRAY ==================================================================
Function fAddToArray(ByVal inptArray As Variant, ByVal inptItem As Variant) As Variant
    Dim vArr As Variant: vArr = inptArray

        If UBound(vArr) = -1 Then
            vArr = Array(inptItem)
        Else
            ReDim Preserve vArr(UBound(vArr) + 1)
            vArr(UBound(vArr)) = inptItem
        End If

        fAddToArray = vArr
End Function


Function fcnvRng2Array(inptRng As Range, Optional inptDelBlank As Boolean = True) As Variant

Dim vResult As Variant

vResult = Application.Transpose(Application.Transpose(inptRng)) 'same WorksheetFunction.Transpose(inptRng.Value)
If inptDelBlank = True Then vResult = fFilterNeq(vResult, "")

fcnvRng2Array = vResult

End Function


Function cnvArray2ArrayList(ByVal inptArr As Variant) As Object

Dim oArr As Object: Set oArr = CreateObject("System.Collections.ArrayList")
Dim vArr As Variant: vArr = inptArr
Dim v As Variant

For Each v In vArr
    oArr.Add v
Next v

Set cnvArray2ArrayList = oArr

End Function


Function fDuplicateArray(ByVal inptArr As Variant) As Variant
'out fDuplicate(range("E2:E17").Value2)

Dim vArr As Variant: vArr = inptArr
Dim oArr As Object
Dim oResult As Object: Set oResult = CreateObject("System.Collections.ArrayList")

Dim l As Long
Dim lSft As Long: lSft = 0
Dim sPrev As String: sPrev = ""
Dim vResult As Variant

Set oArr = cnvArray2ArrayList(vArr)
oArr.Sort

If (Not LBound(vArr) = 0) Then ' oArr is 0 base
    lSft = 1
End If

For l = LBound(vArr) To UBound(vArr)
    If sPrev = oArr(l - lSft) Then
        oResult.Add oArr(l - lSft)
    End If
        sPrev = oArr(l - lSft)
Next l

fDuplicateArray = oResult.toarray

End Function


Function fUniqueArray(ByVal inptArr As Variant) As Variant
'out fDuplicate(range("E2:E17").Value2)

Dim vArr As Variant: vArr = inptArr
Dim oArr As Object
Dim oResult As Object: Set oResult = CreateObject("System.Collections.ArrayList")

Dim l As Long
Dim lSft As Long: lSft = 0
Dim sPrev As String: sPrev = ""
Dim vResult As Variant

Set oArr = cnvArray2ArrayList(vArr)
oArr.Sort

If (Not LBound(vArr) = 0) Then ' oArr is 0 base
    lSft = 1
End If

For l = LBound(vArr) To UBound(vArr)
    If Not sPrev = oArr(l - lSft) Then
        oResult.Add oArr(l - lSft)
    End If
        sPrev = oArr(l - lSft)
Next l

fUniqueArray = oResult.toarray

End Function

'
'Function fDuplicateList(ByVal inptArr As Variant) As Variant
'
'Dim vArr As Variant: vArr = inptArr
'Dim vResult As Variant
'Dim l As Long
'
'For l = LBound(vArr) To UBound(vArr)
'
'
''''''''''''''''''''''''''''''''''''''
'
'
'Next l
'
'
'End Function

'ALLAY FILTER=======================================================
Function fFilterEq(ByVal inptArray As Variant, inptCond As String) As Variant

    fFilterEq = fFilter(inptArray, "Eq", inptCond)

End Function

Function fFilterNeq(ByVal inptArray As Variant, inptCond As String) As Variant

fFilterNeq = fFilter(inptArray, "Neq", inptCond)

End Function

Function fFilterRgx(ByVal inptArray As Variant, inptCond As String) As Variant

fFilterRgx = fFilter(inptArray, "Rgx", inptCond)

End Function

Private Function fFilter(ByVal inptArray As Variant, ByVal inptOperator As String, inptCond As String) As Variant
    Dim vArr As Variant: vArr = inptArray
    Dim lCnt As Long
    Dim sOpr As String: sOpr = inptOperator
    Dim sCnd As String: sCnd = inptCond
    Dim sResult() As Variant: sResult = Array()

    For lCnt = LBound(vArr) To UBound(vArr)
        Select Case sOpr
            Case "Eq"
                If vArr(lCnt) = sCnd Then
                    sResult = fAddToArray(sResult, vArr(lCnt))
                End If

             Case "Neq"
                If Not vArr(lCnt) = sCnd Then
                    sResult = fAddToArray(sResult, vArr(lCnt))
                End If

'            Case "Rgx"
'                If fRegx2Bool(vArr(lCnt), sCnd) Then
'                    sResult = fAddToArray(sResult, vArr(lCnt))
'                End If

        End Select

    Next lCnt

    fFilter = sResult

End Function

'NUM FORMAT ===================================================================================
Function fDigitN(inptStr As String, inptDigit As Long) As String
    fDigitN = Application.WorksheetFunction.Rept("0", inptDigit - Len(inptStr)) & inptStr
End Function

Function fNum2DP(ByVal inptMax As String) As String

    Dim sMax As String: sMax = inptMax
    Dim sRslt As String

    If sMax = fSplitByDelimiter(sMax, ".", 2) Then
        sRslt = 0
    Else
         sRslt = Len(fSplitByDelimiter(sMax, ".", 2))
    End If

    fNum2DP = sRslt

End Function

Function fDigit6(inptStr As String) As String

'1 => 000006

Dim sStr As String: sStr = inptStr

fDigit6 = Application.WorksheetFunction.Rept("0", 6 - Len(sStr)) & sStr

End Function

Function fFullDP(inptNum As String, inptDec As String) As String
'(100,2) -> 100.00
'(3.5, 2)->3.50
Dim sNum As String: sNum = inptNum
Dim sDec As String: sDec = inptDec
Dim sResult As String

sResult = sNum
If Not sNum = fSplitByDelimiter(sNum, ".", 1) Then  '(3.5, 2)->3.50
    sResult = sNum & WorksheetFunction.Rept("0", sDec - fLenOfSplited(sNum, ".", 2))

ElseIf sNum = fSplitByDelimiter(sNum, ".", 1) And sDec > 0 Then '(100,2) -> 100.00
    sResult = sNum & "." & WorksheetFunction.Rept("0", sDec)

Else
    Stop
End If

fFullDP = sResult

End Function

Function fTrimDPZero(inptNum As String) As String
Dim sNum As String: sNum = inptNum
Dim sDec As String
Dim sResult As String

sResult = sNum
If Not sNum = fSplitByDelimiter(sNum, ".", 1) Then
    sDec = Replace(fSplitByDelimiter(sNum, ".", 2), "0", "")
    'T (3.50)->3.5
    'F (1.00)->1
    sResult = IIf(Len(sDec) > 0, _
        fSplitByDelimiter(sNum, ".", 1) & "." & sDec, _
        fSplitByDelimiter(sNum, ".", 1))

End If

    fTrimDPZero = sResult

End Function

Function fLenOfDecimal(ByVal inptNum As String) As String
'12 -> 0
'123.456 -> 3

    Dim sNum As String: sNum = inptNum
    Dim sRslt As String

    If sNum = fSplitByDelimiter(sNum, ".", 2) Then
        sRslt = 0
    Else
         sRslt = Len(fSplitByDelimiter(sNum, ".", 2))
    End If

    fLenOfDecimal = sRslt

End Function


'STRING FORMAT ===================================================================================
Function fWidenStr(ByVal inptStr As String) As String
    fWidenStr = Strings.StrConv(inptStr, vbWide)
End Function


'REGX ========================================================================================
'return match ...
Function fReplace(ByVal inptStr As String, ByVal inptSearch As String, ByVal inptReplace As String) As String
    fReplace = Replace(inptStr, inptSearch, inptReplace)
End Function


Function fReplaceRegx(ByVal inptStr As String, ByVal inptPattern As String, ByVal inptReplace As String, Optional inptGlobal As Boolean = False) As String

'(group) => $n~

Dim regx As Object: Set regx = CreateObject("vbscript.regexp")
    With regx
        .Global = inptGlobal 'isMultiple
        .MultiLine = False
        .ignorecase = False
        .Pattern = inptPattern
    End With

If regx.test(inptStr) Then
    fReplaceRegx = regx.Replace(inptStr, inptReplace)
End If

End Function


Function fRegx(ByVal inptStr As String, ByVal inptPattern As String, Optional inptGlobal As Boolean = False) As Object

Dim regx As Object: Set regx = CreateObject("vbscript.regexp")
Dim oMatch As Object

    With regx
        .Global = inptGlobal 'isMultiple
        .MultiLine = False
        .ignorecase = False
        .Pattern = inptPattern
    End With

If regx.test(inptStr) Then
    Set oMatch = regx.Execute(inptStr)
End If

Set fRegx = oMatch

End Function

Function fRegxTest(ByVal inptStr As String, ByVal inptPattern As String) As Boolean

Dim regx As Object: Set regx = CreateObject("vbscript.regexp")
Dim bResult As Boolean

    With regx
        .Global = True
        .MultiLine = False
        .ignorecase = False
        .Pattern = inptPattern
    End With

If regx.test(inptStr) Then
    bResult = True
Else
    bResult = False
End If

fRegxTest = bResult

End Function
'WS ========================================================================================


Sub CopyWithFormat()

    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent2
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With

    Selection.NumberFormatLocal = "@"
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

End Sub


Public Function fIIf(inptExp As Boolean, inptT As String, inptF As String)
    If inptExp = True Then
        fIIf = inptT
    Else
        fIIf = inptF
    End If
End Function



Private Sub fMerge()
    With Selection
    .Merge
    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlCenter
    End With
End Sub


Private Sub fUMerge()
    With Selection
        .UnMerge
        With .Interior
            .Pattern = xlNone
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
    End With
End Sub


Private Sub fInsertV()
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub


Private Sub fDeleteV()
    Selection.Delete Shift:=xlToLeft
End Sub

Private Sub fInsertH()
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub


Private Sub fDeleteH()
    Selection.Delete Shift:=xlUp
End Sub

Private Sub fCalc()
    ActiveSheet.Calculate
End Sub

Sub copyPasteAsVal()
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
'Selection.NumberFormatLocal = "@"
End Sub

Function Clipboard(Optional StoreText As String) As String
'PURPOSE: Read/Write to Clipboard
'Source: ExcelHero.com (Daniel Ferry)

Dim x As Variant

'Store as variant for 64-bit VBA support
  x = StoreText

'Create HTMLFile Object
  With CreateObject("htmlfile")
    With .parentWindow.clipboardData
      Select Case True
        Case Len(StoreText)
          'Write to the clipboard
            .setData "text", x
        Case Else
          'Read from the clipboard (no variable passed through)
            Clipboard = .GetData("text")
      End Select
    End With
  End With

End Function


Sub FillFormula(inptRng As Range, inptFormula As String)
    Dim rRng As Range: Set rRng = inptRng
        
    With rRng
        .NumberFormat = "General"
        .FormulaR1C1 = inptFormula
        .Replace What:="=", Replacement:="=", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
    End With
    
End Sub


Sub SelectOrAddWs(inptShtName As String, inptWb As String)
Dim sSht As String: sSht = inptShtName
Dim sWb As String: sWb = inptWb
Dim s As Worksheet

For Each s In Workbooks(sWb).Sheets
    If s.Name = sSht Then
        Call DebugOut("UTIL", "select sheet " & sSht)
        Workbooks(sWb).Sheets(sSht).Activate
        Exit Sub
    End If
Next s

With Workbooks(sWb).Worksheets.Add
    Call DebugOut("UTIL", "create new sheet " & sSht)
    .Name = sSht
    .Activate
End With

End Sub


Sub SelectOrOpenWb(inptwbpath As String)
Dim sWbPath As String: sWbPath = inptwbpath
Dim w As Workbook

For Each w In Workbooks
    If w.Name = Dir(sWbPath) Then
        Workbooks(Dir(sWbPath)).Activate
        Exit Sub
    End If
Next w

Workbooks.Open (sWbPath)
End Sub


Sub CloseWb(inptWb As String)
Dim sWb As String: sWb = inptWb
Dim w As Workbook
For Each w In Workbooks
    If w.Name = sWb Then
        Workbooks(sWb).Close False
        Exit Sub
    End If
Next w

End Sub


Sub DeleteTmpTable(inptWorkbook As String)
Dim sWb As String: sWb = inptWorkbook
Dim s As Worksheet

Application.DisplayAlerts = False
For Each s In Workbooks(sWb).Sheets
    If UCase(Left(s.Name, 3)) = "TMP" Then
        Workbooks(sWb).Sheets(s.Name).Delete
    End If
Next s
Application.DisplayAlerts = True

End Sub


Sub DeleteTableByPrefix(inptPrefix As String)
Dim sWb As String: sWb = ThisWorkbook.Name
Dim s As Worksheet
Application.DisplayAlerts = False
For Each s In Workbooks(sWb).Sheets
    If UCase(Left(s.Name, Len(inptPrefix))) = UCase(inptPrefix) Then
        Workbooks(sWb).Sheets(s.Name).Delete
    End If
Next s
Application.DisplayAlerts = True

End Sub


Sub fFixFormula(inptWbName As String, inptShtName As String, inptBaseCol As String, inptPasteCol As String, inptFormula As String)
Dim rRng As Range
Dim lEnd As Long
Dim lBaseCol As Long: lBaseCol = Columns(inptBaseCol).Column
Dim lPasteCol As Long: lPasteCol = Columns(inptPasteCol).Column
With Workbooks(inptWbName).Sheets(inptShtName)
Call DebugOut("UTIL", "fFixFormula :" & inptShtName & " " & inptFormula)
Set rRng = .Range( _
                      .Cells(2, lBaseCol) _
                    , .Cells(.Cells(.Rows.Count, lBaseCol).End(xlUp).Row, lBaseCol))

Call FixFormula(rRng.Offset(0, lPasteCol - lBaseCol), inptFormula)
End With

End Sub

Private Sub FixFormula(inptRng As Range, inptFormula As String)
    Call FillFormula(inptRng, inptFormula)
    inptRng.Copy
    inptRng.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
End Sub


Function Range2String(inptRange As Range, inptSide As String, inptDelimiter As String)
Dim rRng As Range: Set rRng = inptRange
Dim sSide As String: sSide = inptSide
Dim sDel As String: sDel = inptDelimiter
Dim v As Variant
Dim sResult As String

For Each v In rRng
    If Not v.Value = "" Then sResult = sResult & sSide & v.Value & sSide & sDel
Next v

If sResult = "" Then Range2String = "": Exit Function

sResult = Left(sResult, Len(sResult) - 1)
Range2String = sResult

End Function


Sub reload()
    Cells.Replace What:="=", Replacement:="=", LookAt:=xlPart, SearchOrder _
        :=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
End Sub


